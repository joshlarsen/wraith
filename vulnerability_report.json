{
  "GHSA-2vv2-3x8x-4gv7": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "flowise",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The advisory states Flowise (npm) in versions before 3.0.1 ships with no authentication by default and the Custom MCPs feature executes OS commands, allowing unauthenticated remote attackers over the network to run unsandboxed OS commands (RCE). The vulnerability is in the Flowise package itself (direct dependency). The presence of the package and the default no-auth configuration are verifiable from the project, but the advisory does not specify the exact function call used to invoke OS commands, so complete code-level verification is incomplete."
  },
  "GHSA-3j63-5h8p-gf7c": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "x402",
    "exploitability_context": "direct-dependency",
    "attack_vector": "configuration-dependent",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The advisory identifies specific npm packages and versions that must be updated, so the presence of the vulnerability can be confirmed by checking dependency versions in project configuration (package.json) — therefore verifiable and configuration-dependent (only exploitable when a project is using an outdated package). The affected packages are libraries used by resource servers (builders) so this is most likely a direct dependency for those projects. The advisory explicitly states it does not directly affect keys, smart contracts, or funds; no detail is provided about RCE, DoS, or privilege escalation, so the most conservative impact category consistent with a generic SDK vulnerability is data confidentiality (potential information disclosure). A fixed version is provided, so remediation is a simple update. The advisory is published and a patch version is provided, so it is classified as stable/mature."
  },
  "GHSA-3x3q-ghcp-whf7": {
    "verifiability": "verifiable",
    "verifiable_package": "@backstage/plugin-scaffolder-backend",
    "verifiable_function": "fetch:template",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The issue is duplicate logging of action inputs in the Scaffolder's fetch:template action that can cause secrets passed as template inputs (${ { secrets.x } }) to be logged. This is triggered when secrets are supplied as arguments to fetch:template (user-supplied/template input). The vulnerability is in the @backstage/plugin-scaffolder-backend package (fixed in v2.1.1), so it is a direct dependency and results in confidential data leakage. A version update fixes it."
  },
  "GHSA-7rqq-prvp-x9jh": {
    "verifiability": "verifiable",
    "verifiable_package": "mermaid",
    "verifiable_function": "calculateMathMLDimensions",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is an unsanitized innerHTML sink in mermaid's calculateMathMLDimensions, so attacker-controlled diagram labels (user input) can inject HTML/JS when rendered, causing DOM-based XSS (script execution in the page). The flaw is in the mermaid package source (not a transitive-only issue) and is triggered by user-supplied labels (requires rendering of attacker input). It can be confirmed by locating the calculateMathMLDimensions implementation that assigns to innerHTML and observing the KaTeX rendering path. Fix is a sanitization change in the library (simple update). The issue is documented with an advisory/CVE, not a zero-day."
  },
  "GHSA-8cj5-5rvv-wf4v": {
    "verifiability": "verifiable",
    "verifiable_package": "tar-fs",
    "verifiable_function": "extract",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "data-integrity",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The flaw allows crafted tarballs to extract files outside the intended directory (path traversal / symlink handling), enabling arbitrary file writes/overwrites (integrity impact). It is triggered by feeding a malicious archive to tar-fs extraction (user-supplied input). A patch is available in 3.0.9 / 2.1.3 / 1.16.5 and a workaround (ignore non-files/directories) is documented, so updating is straightforward. The issue is directly in the tar-fs package and can be confirmed by inspecting its extraction code."
  },
  "GHSA-8gwm-58g9-j8pw": {
    "verifiability": "verifiable",
    "verifiable_package": "d3",
    "verifiable_function": "html",
    "exploitability_context": "runtime-critical",
    "attack_vector": "user-input-required",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The supplied code shows user-controlled service.iconText passed directly to the d3 .html() sink, which is an objective, inspectable pattern (verifiable). Exploitation requires rendering attacker-supplied diagram text (user input) in a running application that uses mermaid, causing client-side script execution (XSS). A sanitizer fix was committed and a patched release exists, so remediation is a straightforward update and the issue is documented and mature."
  },
  "GHSA-95m3-7q98-8xr5": {
    "verifiability": "verifiable",
    "verifiable_package": "sha.js",
    "verifiable_function": "update",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "data-integrity",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is a missing input type check in the sha.js package's hashing implementation: crafted JSON-stringifyable inputs passed to the hash object's update method can rewind internal state, produce collisions/miscalculations, or cause DoS. It is triggered by attacker-controlled input to update (PoC shows JSON-parsed payloads). The flaw exists in the sha.js package itself (so verification is possible by inspecting the package code), a fix is available upstream (PR and advisory), and the issue is publicly disclosed with a CVE—so this is a stable/mature advisory."
  },
  "GHSA-9x9c-ghc5-jhw9": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "trailingSlash: 'always'",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The issue is an Open Redirect (CWE-601) in the @astrojs/node adapter when used with Astro config trailingSlash:'always' and node adapter in standalone mode. It is triggered via crafted HTTP requests/links (network-accessible) and requires the adapter be directly configured in the project (direct dependency). The effect is a redirect to an external origin which can be used for phishing/credential theft (data confidentiality). A patch exists (commit referenced in advisory), so updating the package resolves the issue."
  },
  "GHSA-cpq7-6gpm-g9rc": {
    "verifiability": "verifiable",
    "verifiable_package": "cipher-base",
    "verifiable_function": "update",
    "exploitability_context": "runtime-critical",
    "attack_vector": "user-input-required",
    "impact_scope": "data-integrity",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is an implementation bug in the create-hash/cipher-base polyfill that fails to validate input types, so it can be triggered by supplying crafted data to hashing APIs (e.g., JSON-parsed payloads). This affects runtime hashing functions used in production code paths (runtime-critical). The primary observable impact is incorrect hash calculation and hash-state rewind (integrity failure), though the advisory also describes downstream risks such as DoS and potential key-recovery in some workflows. The issue can be verified by inspecting the cipher-base/create-hash code for missing type checks in the hash update path (see update implementation), and a version bump to patched releases is the expected remediation."
  },
  "GHSA-f9qj-4c5x-cpcw": {
    "verifiability": "verifiable",
    "verifiable_package": "@elysiajs/cors",
    "verifiable_function": "isOriginAllowed",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is an origin-validation flaw in the @elysiajs/cors package that performs substring matching instead of exact origin matching, allowing malicious origins to be treated as whitelisted and enabling unauthorized cross-origin access to user data. This is exploitable over the network (via a malicious origin/browser) and is present in the named package (direct dependency). A code fix/commit is available, so updating to a patched release resolves the issue."
  },
  "GHSA-ggjm-f3g4-rwmm": {
    "verifiability": "verifiable",
    "verifiable_package": "fs",
    "verifiable_function": "readFile",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The Read/Write File node fails to handle symlinks, allowing an attacker who can create symlinks (e.g., via the Execute Command node) to bypass directory restrictions and read/write restricted files. The node is part of the n8n package itself (direct dependency) and can be invoked at runtime (accessible over network through workflows). The primary impact is confidentiality (unauthorized file reads). A patch is available in n8n v1.106.0, making remediation a simple update. The issue is publicly disclosed and patched (stable/mature)."
  },
  "GHSA-gjx4-2c7g-fm94": {
    "verifiability": "verifiable",
    "verifiable_package": "screenshot-desktop",
    "verifiable_function": "screenshot",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The advisory describes a command-injection vulnerability where untrusted input passed to the library's \"format\" option is interpolated into a shell command, allowing arbitrary command execution. The writeup explicitly names the affected package (screenshot-desktop) and the \"screenshot\" function/option, and notes it can be exploited remotely when used server-side. A patch is available in v1.15.2, so updating fixes the issue."
  },
  "GHSA-hfmv-hhh3-43f2": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "privilege-escalation",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is a stored XSS in n8n's Form Trigger HTML element that allows an authenticated attacker to inject iframe srcdoc or video/source with onerror to exfiltrate n8n-browserId and session cookies. Exploitation occurs over the web when a victim visits the malicious form (network-accessible). It exists in the n8n product itself (direct package). The primary impact described is account takeover / impersonation (privilege escalation). A fix was released in v\u003e=1.98.2, so upgrading resolves the issue."
  },
  "GHSA-j827-6rgf-9629": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "layui",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The issue is a DOM Clobbering vulnerability in the client-side 'layui' library that allows attacker-controlled HTML (e.g., unsanitized name/id attributes in posts/comments) to be turned into executable script via existing JS gadgets — this requires attacker-supplied HTML so user-input is required. The vulnerability resides in the layui package used by websites (direct dependency). The impact is XSS (execution of script in victims' browsers), classified as code-execution. A patch is available in Layui 2.9.17, so remediation is a simple version update. The advisory and patch are published (stable documentation), so this is a stable/mature issue rather than a zero-day or known active-exploitation report."
  },
  "GHSA-mrr8-v49w-3333": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "configuration-dependent",
    "impact_scope": "system-availability",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The package (sweetalert2) itself contains behavior that causes audio/video to play when run on specific TLDs; this makes exploitation dependent on environment/domain configuration (specific TLDs). The issue is in the sweetalert2 package (not a transitive sub-dependency), so classification as a direct-dependency issue is appropriate. The observable effect is undesirable audio/video playback (a disruption/UX issue), which best maps to system-availability from the provided choices. A fix was committed and released (issue resolved by 11.22.4), so remediation is a simple version update and the issue is stable/maturely documented. The writeup does not name a specific function or configuration string to search for, so the presence cannot be confirmed solely by a simple code/config pattern scan and is therefore non-verifiable."
  },
  "GHSA-mv33-9f6j-pfmc": {
    "verifiability": "verifiable",
    "verifiable_package": "packages/storage-driver-local",
    "verifiable_function": "write",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-integrity",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is in Directus's file handling (/files) and allows unauthenticated actors to overwrite existing files or create new files with arbitrary contents/extensions by supplying a filename_disk containing traversal sequences or a known UUID. Exploitation requires network access to the Directus instance and knowledge of at least one file UUID, and is performed via a single HTTP request. The primary impact is modification/poisoning of stored files (data integrity). While remote code execution is possible in certain server configurations (e.g., static serving of uploads allowing a PHP webshell), the core issue is arbitrary file content modification. The flaw is present in the repository storage driver implementation and can be confirmed by inspecting the code."
  },
  "GHSA-p6rm-483j-37jf": {
    "verifiability": "verifiable",
    "verifiable_package": "@wong2/mcp-cli",
    "verifiable_function": "redirectToAuthorization",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "active-exploitation",
    "reasoning": "The report identifies an OS command injection in function redirectToAuthorization in src/oauth/provider.js of @wong2/mcp-cli, and states the attack may be initiated remotely — indicating network accessibility. Command injection enables arbitrary command execution, so impact is code execution. A patch commit is referenced, so updating the package fixes the issue. The exploit has been published, indicating active exploitation in the wild."
  },
  "GHSA-pp7p-q8fx-2968": {
    "verifiability": "verifiable",
    "verifiable_package": "vite-plugin-static-copy",
    "verifiable_function": "configureServer",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is a path-traversal in the vite-plugin-static-copy dev-server middleware that allows retrieval of arbitrary filesystem files (PoC shows ../../../../etc/passwd). It only affects projects that include the plugin (direct dependency) and expose the Vite dev server to the network (--host or server.host), so exploitation is over the network. The effect is disclosure of files (confidentiality). The advisory includes fixes/commits, so presence can be confirmed by checking the package and the plugin's dev-server hook implementation and upgrading to a patched release."
  },
  "GHSA-q4rg-7cjj-5r86": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "express-gateway",
    "verifiable_function": "module.exports",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "active-exploitation",
    "reasoning": "The vulnerability is a Cross-Site Scripting (XSS) in lib/rest/routes/users.js of the express-gateway package (affects express-gateway \u003c= 1.16.10). The report states the attack may be initiated remotely (network-accessible) and an exploit has been publicly disclosed. XSS primarily risks information disclosure and session theft (data confidentiality). The issue is located in the package source (file path provided), so indicators exist but the exact handler function is not named in the advisory (hence partially verifiable). A version update to a patched release is the expected remediation."
  },
  "GHSA-x5gv-jw7f-j6xj": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@anthropic-ai/claude-code",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The issue is an overly broad allowlist in the @anthropic-ai/claude-code package that allows bypassing confirmation prompts to read local files and exfiltrate them. Exploitation requires injecting untrusted content into a Claude Code context window (user-supplied input). A fix was released (users auto-updated to 1.0.24), so remediation is a simple update and the issue is a documented, patched advisory (stable/mature). The description names the affected package but does not provide a specific function or config key, so verification is only partial from the advisory text."
  },
  "GHSA-xf8x-j4p2-f749": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is triggered by HTTP requests to the site’s /_image endpoint using a protocol-relative href (e.g., /_image?href=//example.com/image.png), so it is network-accessible. It exists in the astro package (and the @astrojs/node adapter) used directly by projects, making it a direct-dependency issue. The ability to serve attacker-controlled remote images from the site origin can result in malicious SVG content leading to cross-site scripting (client-side code execution), so the primary impact is code execution. The fix is a code change in the affected packages and is addressed by updated releases, so remediation is a simple version update. The issue is published and fixed (advisory and commit available), so it is classified as stable/mature. Verification requires exercising the endpoint (behavioral) rather than just locating a simple static code/config pattern in a project, so it is non-verifiable by static pattern alone."
  },
  "GHSA-xfhv-wqj6-rx99": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The issue allows an attacker with write access to the local credential cache directory to plant a file and cause the driver to store temporary credentials there, resulting in information disclosure of temporary credentials. The advisory states this affects the snowflake-sdk NodeJS driver (versions 1.12.0–2.0.1) on Linux and was fixed in 2.0.2, so remediation is a version update. The CVSS vector (AV:L) and the description indicate a local filesystem attack requiring write access, not a network or configuration-only vector. There is no specific function name or config string provided in the writeup to allow deterministic code-level detection, so verification cannot be asserted here by a function match."
  },
  "GHSA-xfp8-x3j6-h67v": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "express-gateway",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-integrity",
    "remediation_complexity": "simple-update",
    "temporal_classification": "zero-day",
    "reasoning": "The report describes a Cross-Site Scripting issue in the express-gateway package (lib/rest/routes/apps.js) that can be launched remotely (network accessible). The vulnerability is in the named npm package itself (not described as a sub-dependency), so it is a direct-dependency issue. XSS is identified as the impact; based on the report and provided CVSS (I:L) the primary impact is classified as data integrity (in-browser script execution that can alter client-side data/behavior). The report explicitly names the package and file path but does not provide the exact vulnerable function, so verification is only partial (indicators exist but a specific function name is not given). The advisory indicates public disclosure, and the package version range is identified (up to 1.16.10), so remediation is expected by updating the package."
  },
  "GHSA-xg68-chx2-253g": {
    "verifiability": "verifiable",
    "verifiable_package": "jquery-deparam",
    "verifiable_function": "deparam",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "data-integrity",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The vulnerability is prototype pollution that allows injection of properties into Object.prototype via the library's parameter-parsing function. This is triggered by attacker-controlled input (e.g., crafted query strings) passed to the library, so a malicious user input is required. The flaw exists in the jquery-deparam package itself (not a transitive-only issue). The primary direct effect is modification of global object state (integrity). It is verifiable by inspecting the package's parameter-parsing function and fixed by updating the package to a patched release; the issue is a known CVE from 2021 and is mature/stable in disclosure."
  },
  "MAL-2024-11417": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package perfetto-dev@9.0.0 is reported as malicious and described as executing commands and communicating with a malicious domain. That implies remote/network activity and arbitrary command execution from the package code itself (code execution). The report does not provide specific function names, import strings, or configuration keys to allow static verification, nor does it mention a patched release, so remediation status is unknown."
  },
  "MAL-2024-11840": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself contains malicious behavior: it contacts a malicious domain (network access) and executes commands associated with malicious activity (command execution -\u003e code execution). The vulnerability is in the package code (affects projects that include this package). The report gives no callable function names or configuration strings to search for and provides no patch information, so it cannot be verified from the provided text and appears recently identified."
  },
  "MAL-2024-146": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package itself executes one or more commands associated with malicious behavior, indicating arbitrary command execution in the environment where the package is installed. The writeup does not provide specific function names, import packages, or configuration strings to verify statically, so it cannot be confirmed via code patterns from the provided data. Execution of the malicious commands implies local execution on install/load (local-only). The affected item is the package itself (vscode-mlir), so this is classified as a malicious direct package. No patch or remediation details are provided; avoiding/removing the package is a practical mitigation without an explicit patched version. The disclosure appears to be a recent detection in the package registry (treated as zero-day based on the provided data)."
  },
  "MAL-2025-3128": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@fraudprevention/device-intelligence",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is identified as malicious because it reaches out to a domain associated with malicious activity and executes commands. That indicates outbound network communication (network-accessible) and arbitrary command execution (code-execution). The vulnerability is in the published package itself (so it will affect projects that include it as a dependency — direct-dependency). The package name is provided by the report so presence in a project's package.json / lockfile can be objectively detected, but no specific vulnerable function or code pattern is listed, so confirmation is only partial. No remediation/patch information is provided; malicious packages are typically removed rather than patched, so this is classified as having no fix available in-place. The report gives no timing or exploitation history; the package was flagged by OSSF analysis (a recent detection), so it's treated as a recently disclosed malicious package (zero-day)."
  },
  "MAL-2025-3135": {
    "verifiability": "verifiable",
    "verifiable_package": "@weave-mui/divider",
    "verifiable_function": "import '@weave-mui/divider'",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The package @weave-mui/divider is reported as containing malicious code that communicates with a malicious domain and can fully compromise any host that installs or runs it — indicating arbitrary code execution and remote network activity. Presence can be confirmed by the package name in project dependencies or import statements. No remediation via a benign patch is indicated in the report (malicious package), and an advisory exists (documented), so this is not described as a zero-day or ongoing-exploitation in the provided text."
  },
  "MAL-2025-41244": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "hey-message-content",
    "exploitability_context": "runtime-critical",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package 'hey-message-content' (v8.99.1) was identified as malicious because it communicates with a domain associated with malicious activity — indicating outbound network communication from the package at runtime (possible data exfiltration). Presence can be detected by the package name in project manifests. No patch or timeline information is provided in the report, so remediation and temporal judgments are conservative."
  },
  "MAL-2025-41245": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@cf.cplace.platform/forms",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "OpenSSF flagged the package @cf.cplace.platform/forms as malicious because it communicates with a domain associated with malicious activity. That indicates outbound network communication from the package (network-accessible) and potential data exfiltration (data-confidentiality). The issue is in the package itself (direct-dependency). The report does not include the specific malicious domain, exact network call, or function name, so confirmation requires inspecting the package contents for outbound calls or domain strings (partial verification). Removal/blocking or substituting the package or blocking the domain are viable mitigations without knowing a patched release."
  },
  "MAL-2025-41246": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "OpenSSF flagged the solana-fb package as malicious that \"executes one or more commands\". This indicates arbitrary command execution on the host (code execution). The issue is in the package itself (not information about a subdependency), so it's a direct-dependency concern. Presence of calls to Node's child_process APIs (e.g., exec) in the package source is an objective indicator. No patch or safe version is mentioned in the report, so no-fix-available is the conservative remediation classification."
  },
  "MAL-2025-41247": {
    "verifiability": "verifiable",
    "verifiable_package": "grok-sdk",
    "verifiable_function": "postinstall",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "stable-mature",
    "reasoning": "Advisory states the package (grok-sdk) contains malicious code that can fully compromise any computer with the package installed — indicative of arbitrary code execution on systems where the package is installed. Presence is identifiable by the package name in project manifests or node_modules. Removal is advised but the advisory warns compromise may persist."
  },
  "MAL-2025-41248": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "monitor-package",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The advisory describes a malicious npm package (monitor-package) that, when installed or running, fully compromises the host. This indicates the attack requires the package to be present/executed on the machine (local-only) and affects runtime execution paths (runtime-critical). The primary impact is arbitrary code execution / full compromise. The package name is provided but no specific vulnerable function is listed, so verification is incomplete."
  },
  "MAL-2025-41249": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package mv-hosp@1.0.1 is reported as malicious: it communicates with a domain tied to malicious activity and executes commands. Communication with an external domain indicates a network-accessible vector. Because the package itself (mv-hosp) is the identified malicious component, the vulnerability affects projects that include it as a dependency (direct-dependency). Executing commands on the host corresponds to code execution. The report does not name specific functions or code patterns to verify automatically, so verifiability is non-verifiable. No patch or remediation is mentioned in the writeup; mitigation without an upstream update (e.g., removing or blocking the package/network) is possible, so remediation is classified as workaround-available. The report is an active detection by package analysis and provides no temporal details about exploitation or patch status, so it is classified as zero-day (recently identified)."
  },
  "MAL-2025-41250": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@navify-platform/i18n",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @navify-platform/i18n is malicious because it communicates with a domain associated with malicious activity — indicating network communication (network-accessible) and likely data exfiltration (data-confidentiality). The issue resides in the package itself (a malicious package consumers install), so consumers who directly depend on it are exposed (direct-dependency). The report does not provide specific code/function indicators or remediation details; removal or avoiding the package is a practical mitigation, so a workaround is possible. Temporal details (patch availability or active exploitation) are not provided."
  },
  "MAL-2025-41251": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@navify-platform/idle",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The OpenSSF analysis flags the package @navify-platform/idle itself as malicious because it communicates with a domain tied to malicious activity. That indicates the malicious behavior involves network egress (hence network-accessible) and most directly risks data exfiltration (data-confidentiality). The issue is in the package code itself (the package is the affected artifact), so classification is as a vulnerability in a direct dependency (the report names the package). Verifiability is partial: the package name is known and presence can be detected in a project's dependency list or source tree, but the writeup does not provide the specific malicious domain string or the specific function/API used to exfiltrate data, so the malicious call cannot be uniquely located from the provided details. No patch or remediation is referenced in the report, so the practical mitigation is to remove or replace the package (workaround-available) until a trusted fix is published. Temporal classification is set to zero-day because the report is a direct detection of malicious behavior with no accompanying information about patches or established remediation; there is no evidence in the writeup of known widespread exploitation or a long-established advisory."
  },
  "MAL-2025-41252": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@navify-platform/url",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported as containing malicious code that communicates with a domain associated with malicious activity, which implies outbound network communication and potential data exfiltration (confidentiality impact). The package name is provided so presence in a project's dependency tree can be confirmed, but no specific malicious function or domain string is listed, so code-level confirmation is incomplete. No information about a patched/fixed release or remediation is provided in the report, and the report appears to be a recent detection."
  },
  "MAL-2025-41253": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report indicates the package (@navify-platform/error@1.2.0) contains malicious code that communicates with a domain associated with malicious activity, which implies a network-accessible vector and potential data exfiltration (confidentiality impact). The issue is in the package itself (so classified as a direct-dependency risk). The writeup provides no specific function name or configuration string to verify the malicious behavior in source code, and no information about a patch or remediation status, so verification and remediation classifications reflect that absence of concrete code/config indicators and lack of patch details."
  },
  "MAL-2025-41254": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "orion-ui",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The OpenSSF analysis states orion-ui@9.2.2 communicates with a domain linked to malicious activity, which implies network-based communication and likely data exfiltration (confidentiality). The issue is in the package itself (orion-ui), so it affects projects that directly depend on that package. The report does not name the domain or show the exact code path, so the condition is only partially verifiable by code inspection (indicators exist but the specific artifact to search for is not provided). No patch or remediation was mentioned in the writeup, but removal/blocking of the package or network connections are practical mitigations, so remediation is classified as workaround-available. The package was flagged by OpenSSF analysis (newly identified in this report), so it is treated as a zero-day detection in this writeup."
  },
  "MAL-2025-41255": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package ai-agent-email@9.0.1 is described as malicious because it communicates with a domain associated with malicious activity, which implies network-based exfiltration (data confidentiality). The report gives no code snippets, function names, or configuration strings to confirm the exact indicator, so the presence cannot be directly verified from the writeup. The package itself is the malicious component (affects projects that include it directly). No patch or remediation is mentioned; removal/avoidance of the package is the most immediate mitigation without an upstream fix. The report appears to be a detection by OSSF (recent identification), with no statement about active exploitation in the wild."
  },
  "MAL-2025-41256": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "other-external",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The package 'other-external' (npm) is reported as malicious because it communicates with a domain associated with malicious activity — indicating network-based exfiltration/communication. The package itself is the affected component (so the issue exists in that package). The report gives an observable indicator (network communication) but does not provide the exact domain string or specific code/function, so confirmation from source requires inspecting the package files (partial indicators present). No patch or exploitation timeline is provided in the writeup, so mitigation is likely removal/blocking rather than a documented patch in this entry."
  },
  "MAL-2025-41257": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@uit-spritesmith/webpack",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package (@uit-spritesmith/webpack@0.1.3) was flagged as malicious because it communicates with a domain associated with malicious activity — this indicates a network-accessible malicious behavior that can exfiltrate data (confidentiality impact). The vulnerability is in the named package itself (i.e., the malicious package), so it applies when that package is installed/imported (direct-dependency). The report names the package but does not include specific function names or exact malicious domain strings, so the presence of the malicious code can be partially verified by inspecting the package source for network-calling code or the malicious domain, but cannot be fully confirmed from the provided text alone. A practical remediation is to remove or replace the package (workaround) rather than relying on a confirmed upstream patch; no patch or timeline information is provided, so this is classified as a recent detection (zero-day) based on the analysis report."
  },
  "MAL-2025-41258": {
    "verifiability": "verifiable",
    "verifiable_package": "@bitkub-next-frontend-v2/app-bitkub-next",
    "verifiable_function": "import ... from '@bitkub-next-frontend-v2/app-bitkub-next'",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (@bitkub-next-frontend-v2/app-bitkub-next) is identified as malicious and communicates with a domain associated with malicious activity, indicating network-based exfiltration. Because the malicious code resides in the package named in the report, presence can be confirmed by locating the package import in a project's dependencies. No evidence of remote code execution, privilege escalation, or DoS is provided. The package is the affected artifact (direct dependency)."
  },
  "MAL-2025-41259": {
    "verifiability": "verifiable",
    "verifiable_package": "amp-metrics",
    "verifiable_function": "require('amp-metrics')",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package amp-metrics@1.0.3 is identified as malicious because it communicates with a domain associated with malicious activity — this indicates network-based exfiltration or C2 behavior (confidentiality impact). The issue is in the package itself (the malicious package), so detection/mitigation can be applied where that package is present. No specific exploit functions were listed in the report."
  },
  "MAL-2025-41260": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report describes an npm package ('catflix'@2.0.0) that contacts malicious domains and executes commands. Those behaviors indicate arbitrary code runs on the host when the package is installed or used (affecting runtime paths) and require the package to be present on the local system. The writeup provides no specific function names or configuration indicators, so the condition cannot be confirmed by code-pattern search. No remediation or patched version is mentioned in the report, and the package was flagged by OpenSSF (a recent detection), so it is treated as a newly-identified malicious package."
  },
  "MAL-2025-41261": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package 'chartsmaan' is flagged as malicious because it communicates with a domain associated with malicious activity — this indicates network-based behavior (data exfiltration/communication) and a confidentiality impact. The report describes the package itself as malicious (affects the package directly). The write-up does not include specific function names, package imports, or remediation details, so the presence cannot be confirmed by code-patterns alone and no patching status is given; removal or avoiding the package is the practical mitigation."
  },
  "MAL-2025-6814": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package itself communicates with a malicious domain and executes commands — behavior that implies remote network communication and execution of code/commands on the host. The issue is in the listed package (horizon-ui-ng), so it affects that package directly. No specific function names, code snippets, or configuration strings were provided in the writeup, so the presence of the malicious behavior cannot be confirmed from code alone in this description. No remediation or patch information was provided; removing/avoiding the package is the immediate mitigation."
  },
  "MAL-2025-6817": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (nestjs-datadog@500.0.2) is reported as malicious and performs outbound communication to a malicious domain and executes commands. That implies arbitrary command execution within the host environment (code execution) and network communication (network-accessible). The vulnerability is in the package itself, so classification as a direct-dependency is appropriate. The presence of executable commands and remote communications can be verified by searching the package source for usage of Node.js process execution APIs and the malicious domain string. No patch or remediation is mentioned in the report, so treat it as having no fix available in the provided data. The disclosure appears to be a direct report of malicious behavior (recent detection), so it is classified as zero-day based on the supplied information."
  },
  "MAL-2025-6831": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself is reported as malicious and \"executes one or more commands\" and communicates with a malicious domain. That indicates the package contains code that performs command execution when installed or run locally, so the primary impact is arbitrary code execution. Presence of the malicious behavior can be confirmed by inspecting the package source for calls that execute shell commands and network communication. The report names the specific package (@evt-cdk/core) as affected but does not mention a patch or remediation."
  },
  "MAL-2025-6832": {
    "verifiability": "verifiable",
    "verifiable_package": "@sangith/newrelic",
    "verifiable_function": "child_process.exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package (@sangith/newrelic@1.2.3) executes commands associated with malicious behavior and communicates with a malicious domain. That indicates arbitrary command execution capability (code execution) and network communication. The affected item is the package itself (not described as a sub-dependency), so classified as a direct-dependency. Verification can be done by inspecting the package code for command-execution APIs and outbound network calls. No patch or remediation information is provided in the writeup, and no in-the-wild exploitation timeline is given, so remediation and temporal fields are conservative based on available facts."
  },
  "MAL-2025-6835": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the c-monitor-dashboard package executes commands associated with malicious behavior and communicates with a malicious domain, indicating remote/network activity and arbitrary command execution risk. The writeup does not provide specific function names or configuration strings to allow deterministic code-level confirmation, so verification is not possible from the provided details. No patch or remediation status is specified, so removing/avoiding the package is the realistic immediate mitigation."
  },
  "MAL-2025-6842": {
    "verifiability": "verifiable",
    "verifiable_package": "isotopet4s-layout",
    "verifiable_function": "child_process.exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The report states the npm package isotopet4s-layout executes commands and contacts a malicious domain. That indicates malicious code runs on any system that installs/executes the package (local execution) and can perform arbitrary commands → code execution. The issue is present in the package itself (not described as a transitive-only problem). The presence of command execution and outbound network calls can be confirmed by inspecting the package source for uses of Node child_process APIs and hardcoded malicious domains. Because the package is identified as malicious (not described as patched), remediation typically requires removal/replacement rather than a safe upstream patch."
  },
  "MAL-2025-6848": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package newrelic2-scheduler is identified as containing malicious behavior: it executes commands and communicates with a malicious domain. This implies arbitrary code execution when the package runs (code-execution). The issue is in the package itself (direct-dependency) and requires the package to be installed/executed on the host (local-only). The presence of command execution can be detected by scanning for uses of Node's child_process API (e.g., exec). No patch or remediation is stated in the report, but removing or replacing the malicious package is an available mitigation (workaround). The package was flagged by OpenSSF analysis (recent identification), consistent with a recent/zero-day classification."
  },
  "MAL-2025-6849": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (newrelics-scheduler@1.7.2) is identified as malicious and is reported to execute commands and communicate with a malicious domain. Executing commands implies arbitrary code execution capability; communicating with a domain indicates network-based activity. The issue is in the package itself (not described as a sub-dependency), so classify as a direct-dependency. The report does not name specific functions or configuration strings, nor does it state a published patch, so it cannot be objectively verified from the provided text and no fix is indicated. The package was newly flagged as malicious by analysis, so treat as a newly disclosed (zero-day) malicious package."
  },
  "MAL-2025-6851": {
    "verifiability": "verifiable",
    "verifiable_package": "scaleft",
    "verifiable_function": "child_process.exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The OpenSSF analysis identifies the npm package 'scaleft'@1.7.7 as containing malicious behavior: it executes OS-level commands and communicates with a malicious domain. This indicates arbitrary command execution capability (code execution) present in the package itself (a direct dependency). The communication with an external domain makes the malicious behavior network-accessible. Verification can be done by inspecting the package source for use of command-execution APIs (e.g., child_process.exec) and the package name 'scaleft' is provided by the report. No remediation or patched version is referenced in the report, so no fix is indicated."
  },
  "MAL-2025-6855": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "simple-web-app-package",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself contains and executes malicious commands and initiates communication with a malicious domain, so the issue occurs at runtime within the executing package (runtime-critical) and enables arbitrary code execution. Exploitation requires the package code to run in the target environment (local-only) rather than being triggered remotely by network requests. The package name/version is given but no specific function or code snippet is provided, so verification is incomplete. Removal or replacement of the malicious package is a practical mitigation (workaround). The package was flagged by OpenSSF analysis (recent detection) and no patch information is provided, so this is treated as a newly disclosed malicious package."
  },
  "MAL-2025-6859": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "third-party-library",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported as malicious and executes commands and communicates with a malicious domain (implies remote network activity and execution of arbitrary/malicious commands). It's the third-party package itself (so a direct dependency). The report names the package but does not provide specific function names or a confirmed patched release, so some verification is possible by detecting the package/version but not the exact malicious code path."
  },
  "MAL-2025-6865": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "azure-documentdb-node",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package azure-documentdb-node@9.9.9 is reported as malicious by OpenSSF: it communicates with a malicious domain and executes commands. That indicates arbitrary command execution capability when the package runs (code-execution). The malicious code resides in the package itself (not described as a sub-dependency), so this is classified as a direct-dependency issue. Exploitation requires the package to be installed/run on the host (local-only). The report gives behavioral indicators but does not include specific function names or configuration strings to search for, so full automated verification requires inspecting the package code (partially-verifiable). Removal or replacement of the package is a viable mitigation; no patch/version is provided in the report."
  },
  "MAL-2025-6878": {
    "verifiability": "verifiable",
    "verifiable_package": "biocatch-capacitor-plugin",
    "verifiable_function": "require('biocatch-capacitor-plugin')",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (biocatch-capacitor-plugin@9999.0.1) is flagged as malicious for communicating with a domain associated with malicious activity, indicating network-based exfiltration risk (data confidentiality). Presence can be confirmed by finding the package as a dependency in project manifests or imports. Because the report names the package itself, the likely context is a direct dependency. No patch information is provided, so mitigations such as removing the package or blocking its network access are the evident short-term remedies."
  },
  "MAL-2025-6879": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@yaqiguo/dnstest",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The OSSF analysis reports that the package @yaqiguo/dnstest communicates with a domain associated with malicious activity, indicating outbound network calls that can exfiltrate data. The issue is in the malicious package itself (affects consumers that install/import it), so it is categorized as a direct dependency and exploitable via network access. No specific vulnerable function or patch is provided in the report, so confirmation is only partial and no remediation release is referenced."
  },
  "MAL-2025-6880": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is identified as malicious and is an npm package that, when installed/run, contacts a malicious domain and executes commands. Exploitation requires the package to be installed/run on the host (local-only) and is most relevant when the package is a direct dependency. The observed behaviors (remote communications and command execution) indicate arbitrary code execution risk. The report provides no specific functions or configuration strings to search for, so the condition cannot be fully verified from the writeup. Removal/avoidance of the package is a practical mitigation; no patch information is provided in the report. The package was flagged by OSSF analysis (recent detection), so treated as a recently disclosed malicious package."
  },
  "MAL-2025-6881": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package was flagged as malicious because it contacts a malicious domain and executes commands. Executing commands indicates arbitrary code execution potential (impact_scope = code-execution). These behaviors require the package to be present and executed on the host (install/run), so the attack requires local presence (attack_vector = local-only). The issue is in the package itself (azure-arm-parameterflattening), so the relevant context is a directly included package (exploitability_context = direct-dependency). The report does not include function names, code snippets, or configuration keys to definitively locate the malicious code, so it cannot be objectively verified from the provided text (verifiability = non-verifiable). Removal or blocking of the package is the typical immediate mitigation rather than a simple version bump, so remediation is classified as workaround-available. The report is a fresh malicious-package flag from OSSF analysis with no further timeline or exploitation data provided, so it is treated as a recent disclosure (temporal_classification = zero-day)."
  },
  "MAL-2025-6882": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is identified as containing malicious behavior: it contacts a malicious domain and executes commands. That indicates arbitrary command execution capability in code shipped with the package (highest-impact: code execution). This is verifiable by inspecting the package for use of Node's child_process functions and for outbound domain strings. Because the package itself is malicious, exploitation requires installing/running the package (local execution). Mitigation can be achieved by removing or replacing the package rather than awaiting an upstream patch."
  },
  "MAL-2025-6883": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@capacitor-bmo/biometric",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package (@capacitor-bmo/biometric) is identified as malicious because it communicates with a domain associated with malicious activity — this implies outbound network communication (network-accessible) and likely data exfiltration (data-confidentiality). The issue is reported for the package itself (an npm package), so the primary context is when that package is included (direct-dependency). The report gives no specific function or domain string, so the presence can only be partially confirmed by inspecting the package code/artifacts. No patch or remediation is mentioned, so mitigation (removal/blocking) is the realistic immediate measure rather than a confirmed version bump; the package was newly flagged as malicious, so it is treated as a recent (zero-day) discovery."
  },
  "MAL-2025-6884": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package '@capacitor-bmo/common' is flagged as malicious because it communicates with a domain associated with malicious activity, indicating network-based exfiltration risk (data confidentiality). The issue is in the package itself (affects consumers that include/import it), so classification as a direct dependency is appropriate. Verification is partial: the package name is known from the report but the writeup does not include the specific domain string or code/function used to communicate, so code-level confirmation is incomplete. No patch or remediation details are provided in the report, but practical mitigations (removing/replacing the package, blocking egress to the domain) are possible without a vendor update. The report appears to be a recent identification by OSSF analysis with no exploitation or long-term posture described, so it is treated as a recently disclosed (zero-day) malicious package."
  },
  "MAL-2025-6885": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package solana-pump-test@2.5.3 was identified as malicious and executes one or more commands. That indicates arbitrary command/code execution on any system that installs or runs the package (code-execution). Because the package itself is named, the primary exposure is to projects that directly include/install that package (direct-dependency). The malicious commands run on the host where the package is installed/executed, so exploitation requires local installation/execution of the package (local-only). The report gives no specific function names, install hooks or configuration strings to locate the malicious code, so the presence cannot be confirmed from a code-pattern described in the writeup (non-verifiable). A practical remediation is to remove or replace the package or avoid installing it (workaround-available). The package was identified by OpenSSF as malicious (recent detection) but the writeup does not report known widespread exploitation or an upstream patch, so it is classified as zero-day (recently disclosed)."
  },
  "MAL-2025-6886": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The OpenSSF report identifies the npm package solana-spl-sdk@0.1.1 as containing malicious code that \"executes one or more commands associated with malicious behavior.\" This indicates arbitrary command execution on any host that installs/runs the package (code-execution). The malicious code resides in the package itself (i.e., the affected package is solana-spl-sdk), so the issue is tied to that dependency (direct-dependency). Execution of npm package install/usage happens locally on the host running npm (install/scripts run locally), so the attacker vector is local-only. The report does not provide specific function names, command strings, or a patched version, so the presence cannot be confirmed via a specific code/config pattern in the writeup (non-verifiable). Because no patch information is provided, the pragmatic remediation is to avoid or remove the package (workaround-available) rather than asserting a simple update or available fix. The report appears to be a direct detection/disclosure of malicious behavior (recent identification), so it is classified as zero-day in the absence of additional temporal or exploitation details."
  },
  "MAL-2025-6887": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "log4net",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package (log4net @4.0.1 on npm) is reported as malicious: it contacts a domain associated with malicious activity and executes commands. This indicates remote/network communication and execution of commands leading to arbitrary code execution on hosts that run the package. Presence of the package and static indicators (suspicious outbound-domain strings) can be detected, but confirmation of runtime command execution requires dynamic/behavioral analysis, so full verification is incomplete."
  },
  "MAL-2025-6888": {
    "verifiability": "verifiable",
    "verifiable_package": "meid-cli",
    "verifiable_function": "meid-cli",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The advisory describes a malicious npm package (meid-cli) that, when installed or executed, can fully compromise a host. That indicates arbitrary code execution at runtime on any system where the package is installed or run. The presence of the specific package name in package.json/node_modules is an objective indicator that the malicious package is present. The advisory recommends removal and key rotation but does not describe a safe patch, so this is effectively a malicious package rather than a fixable bug. The advisory on GitHub documents the issue and remediation actions (remove/rotate), so it is treated as a documented/stable disclosure rather than an undisclosed zero-day or explicitly known ongoing exploitation in the provided text."
  },
  "MAL-2025-6889": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself is described as malicious: it executes commands and communicates with a malicious domain. That implies arbitrary command execution within any environment that installs/loads the package (supply‑chain/local execution). The report does not name specific functions, modules, or configuration strings, so the presence cannot be confirmed by a concrete code/config search from the provided text."
  },
  "MAL-2025-6890": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself is identified as malicious and is known to execute commands and communicate with a malicious domain. Presence can be confirmed by inspecting the package source for code that calls child_process.exec or references the malicious domain. As an npm package, the risk applies when the package is installed/loaded (local execution). Executing commands indicates arbitrary code execution. No patch or remediation information is provided in the report, and the identification appears to be a recent detection by code-analysis (OpenSSF), so treated as a new/zero-day malicious package."
  },
  "MAL-2025-6891": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself performs network communication with a domain tied to malicious activity and executes commands associated with malicious behavior, indicating runtime code execution capability and network-based activity. The issue is reported for the package 'signup-ui-lego-core' so the vulnerability resides in that package (direct-dependency) and is not described in terms of a specific code pattern or configuration string that can be checked in source, so it is not verifiable from the provided writeup. No information about an upstream patch was provided; removing or not using the package is an available mitigation."
  },
  "MAL-2025-6892": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "child_process.exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (appcenterclient@7.7.9) was flagged as malicious by OSSF for contacting a malicious domain and executing commands. This indicates the malicious behavior is present in the package code (i.e., in the package a consumer installs), so it is treated as a direct-dependency issue. Communication with remote domains supports a network-accessible vector; execution of commands implies arbitrary code execution risk. The presence of command execution can be verified by searching the package source for Node APIs that run commands (e.g., child_process.exec/execSync) and for network call patterns. No patch status or exploitation timeline is provided by the source; mitigation by removing or replacing the package is a practical workaround."
  },
  "MAL-2025-6893": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (gen-studio@1.1.2) is flagged as malicious and contains code that contacts a malicious domain and executes commands. This indicates arbitrary command execution when the package is run/installed in the local environment (not a remote/network-triggered exploit). The issue is in the package source (a direct dependency) and the writeup does not provide specific function names or configuration strings to allow automated detection, nor does it mention a patched version or remediation, so verification and remediation status cannot be confirmed from the provided details."
  },
  "MAL-2025-6894": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is described as containing malicious code that communicates with a malicious domain and executes commands; that behavior implies arbitrary code execution at runtime and outbound network activity. The report names the package itself (commonweb-flow@10.11.0) as malicious but does not list specific functions, callsites, or a fixed/patched version, so we cannot confirm exact code patterns. Remediation by removing or replacing the package is feasible (workaround) but no patch/fix details are provided. The package was recently flagged by OpenSSF (identified as malicious), indicating a recent/new discovery."
  },
  "MAL-2025-6895": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported as containing malicious code that both communicates with a malicious domain and executes commands. Those behaviors are observable in package source (network calls and invocation of child process APIs). The issue resides in the package itself (malicious package), so it is a direct-dependency risk when the package is installed/executed. Command execution indicates arbitrary code execution risk. No patch or remediation is mentioned in the report, and the package was flagged by OpenSSF as malicious (newly reported), so it is treated as a recently disclosed (zero-day) malicious package."
  },
  "MAL-2025-6896": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "child_process.exec",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported to execute commands and contact a malicious domain, which indicates arbitrary command execution in consumers' runtime. This is observable in code by calls that spawn/execute processes and by network-request calls. No patch or remediation is mentioned in the report. Exploitation requires the package to be installed/run (local execution) rather than a remote attacker-triggered input, so the runtime execution path is the primary concern."
  },
  "MAL-2025-6898": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package itself contacts a domain linked to malicious activity, so the malicious action is triggered by the package making network requests (network-accessible) and is present in the package artifact (direct-dependency). Such outbound communication indicates potential data exfiltration (data-confidentiality). The write-up gives no domain strings, function names, or config patterns to search for, so the condition cannot be confirmed by static code/config indicators (non-verifiable). No patch or remediation information is provided; the immediate practical mitigation is to remove/avoid the package (workaround-available). Because the report describes discovered malicious behavior but provides no timing or patch/exploitation status, it is treated as a zero-day disclosure until further details are available."
  },
  "MAL-2025-6899": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "development-only",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The flagged package is an eslint plugin (development-time tool) and the report states it communicates with a domain associated with malicious activity, indicating a network-based data exfiltration/privacy risk. The writeup provides no specific function names or domain strings to search for, so the presence of the malicious behavior cannot be confirmed by a simple code/config fingerprint. No patch or remediation details are provided; removal/replacement of the malicious package is a practical mitigation. The report appears to be a recent detection by OpenSSF and does not state known widespread exploitation, so treated as newly reported (zero-day)."
  },
  "MAL-2025-6900": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@angular_devkit/architect",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @angular_devkit/architect contains malicious code that communicates with a domain tied to malicious activity. That indicates runtime network communication to an external host (network-accessible) and implies potential data exfiltration (data-confidentiality). The issue is in the named package itself (direct-dependency). No specific function or config string was provided to confirm exact code paths, so verification is partial. Because this is a flagged malicious package, mitigation is typically removing or replacing the package rather than relying on a patch (workaround-available). The vulnerability identifier indicates a recent disclosure (MAL-2025...), so it is classified as a zero-day report in this writeup."
  },
  "MAL-2025-6901": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "@angular_devkit/build_angular",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the named package (@angular_devkit/build_angular) contains malicious code that communicates with a domain associated with malicious activity — this implies outgoing network communication (network-accessible) and likely data exfiltration (data confidentiality). The vulnerability is in the named package (direct-dependency). Removal or replacement of the package with a non-malicious/patched version is the expected remediation."
  },
  "MAL-2025-6902": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@goes-funky/y42-vscode",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "active-exploitation",
    "reasoning": "The package itself (@goes-funky/y42-vscode) is identified as executing commands and communicating with a malicious domain, which indicates arbitrary code execution capability and network communication. The vulnerability is in the package named (so it would be present if that package is a direct dependency). There is no function name or config string provided to fully confirm the exact code path, so verification is partial (package is identifiable but specific call sites are not described). No patch or remediation is described in the report, so treated as having no fix available. The report does not state a public patch timeline but indicates active malicious behavior, so classified as active-exploitation."
  },
  "MAL-2025-6903": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@hornetsecurity/angular-search-box",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself contains malicious code that communicates with an external domain, so exploitation occurs over the network (data exfiltration/communication). The vulnerability is in the named package (so it affects projects that directly depend on it). The report names the package but does not provide a specific function or configuration string to search for, so only partial verification from code is possible. No patch or timeline is provided, so remediation is typically removal/blocking or replacing the package (workaround) rather than a documented patch, and the disclosure appears to be a recent malicious-package report (classified here as zero-day based on the provided summary)."
  },
  "MAL-2025-6904": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package contains malicious code that communicates with a malicious domain, which implies network-based exfiltration/communication (network-accessible). The issue is in the listed package itself (not a transitive dependency), so direct-dependency is appropriate. The observable behavior described suggests data confidentiality risk (communication to malicious infrastructure). The writeup gives no concrete function name, domain string, or patch information, so verification and remediation determinations are conservative."
  },
  "MAL-2025-6905": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The package contains malicious code that communicates with a domain associated with malicious activity — this indicates outbound network communication (network-accessible) and likely data exfiltration (data confidentiality). The issue is in the listed package itself, so it affects projects that directly depend on @identity-authn/authn-js-sdk (direct-dependency). The writeup does not name a specific function or domain string to search for, nor does it state a patch or timeline, so verification and temporal details cannot be confirmed from the provided information."
  },
  "MAL-2025-6907": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package contains malicious code that communicates with a malicious domain — this implies external network communication (network-accessible) and that the malicious behavior resides in the named package itself (direct-dependency). The primary objectively-supported impact is potential data exfiltration/communication (data-confidentiality). The writeup does not provide a specific function, package import, or configuration string to search for, so the presence cannot be verified by a concrete code/config pattern from the provided text (non-verifiable). No information about available patches is given; practical mitigations such as removing the package or blocking the domain are possible without a confirmed patch (workaround-available). The advisory appears to be a newly reported malicious package instance in the registry and gives no indication of established patches or long-term status, so it is treated as a zero-day disclosure in the absence of temporal details."
  },
  "MAL-2025-6908": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@sber-business-id-kekw/srp",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself contains malicious code that communicates with a domain associated with malicious activity, which indicates a risk of data exfiltration (confidentiality). The vulnerability is in the named package (a direct dependency) and can be triggered by the package performing outbound network connections, so network access is the relevant vector. The report does not name a specific vulnerable function or configuration or state that a patch exists, but the behavior can be confirmed by inspecting the package source for outbound network calls or the malicious domain, so the issue is partially verifiable. No patch information is provided; practical mitigations include removing/replacing the package or blocking its network egress, so a workaround is available. The disclosure appears to be a recent identification of a malicious package (no evidence of widespread exploitation or long-term legacy status)."
  },
  "MAL-2025-6909": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "actor-alarms",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package contains malicious code that communicates with a domain associated with malicious activity, which implies outbound network communication and potential data exfiltration (data confidentiality). The vulnerability is in the actor-alarms package itself (the affected package listed), so the most direct context is a direct-dependency. The writeup does not include a specific domain, network call function, or remediation status, so verification is incomplete and remediation/temporal details are not stated."
  },
  "MAL-2025-6913": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "boss-eeeeeeeeeeeeeeui",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported to communicate with a domain associated with malicious activity, indicating network-based exfiltration (network-accessible) and an information disclosure impact (data-confidentiality). The issue is in the named package itself (boss-eeeeeeeeeeeeeeui), so classified as a direct-dependency risk. The report does not include a specific function name or the exact malicious domain string, so the presence can be indicated but not fully confirmed by code inspection alone. Mitigation can be achieved by removing or replacing the package (workaround) but no patching information is provided. No temporal details are given in the writeup, so time-based classification is uncertain."
  },
  "MAL-2025-6914": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The affected package is 'bug-bounty' (an npm package) — that makes this a direct-dependency issue if the package is installed. The report states the package communicates with a domain associated with malicious activity, indicating outbound network access and an exfiltration/information-disclosure risk (data confidentiality). The writeup does not include a specific domain, function name, or code pattern to search for, so the presence of the malicious behavior cannot be confirmed by an objective code/config search from the provided data."
  },
  "MAL-2025-6915": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is an npm package (direct dependency) and the report states it communicates with a domain associated with malicious activity, which implies network-based exfiltration/communication (data confidentiality impact). The report gives no specific function name or domain string to search for, so the presence cannot be confirmed purely by a code/config pattern from the provided information. No patch or exploitation timeline is provided, so mitigation by avoiding or removing the package is the only objective remediation indicated in the writeup."
  },
  "MAL-2025-6916": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package communicates with a domain tied to malicious activity, indicating network communication that could enable data exfiltration (data confidentiality). The vulnerability is in the burst-dash package itself (so classification as a direct dependency). The writeup does not include specific code, function names, or configuration strings to search for, so the presence of the malicious behavior cannot be confirmed from the provided text alone (non-verifiable). No patch or remediation status was provided; removal or blocking the package/network are plausible mitigations without a stated patch, so a workaround is indicated. No temporal details or reports of active exploitation were included; the issue appears to be a newly reported malicious package (classified here as zero-day) but the writeup provides limited temporal information."
  },
  "MAL-2025-6917": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "callgraphbff",
    "verifiable_function": "http.request",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "active-exploitation",
    "reasoning": "The package is described as containing malicious code that communicates with a domain associated with malicious activity, indicating outbound network behavior (exfiltration or C2) rather than a local-only or input-triggered bug. The vulnerability is listed for the package itself (callgraphbff), so classification assumes direct dependency. Because the description only states network communication with a malicious domain, the most likely impact is data confidentiality (information disclosure). No specific fix/version was provided, so removal/blocking or network restrictions are the obvious mitigations."
  },
  "MAL-2025-6919": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The OpenSSF analysis reports the npm package coronavirus-calculator@2.0.0 contains malicious behavior: it executes commands and communicates with a malicious domain. This is code that runs on any system that installs or requires the package (local execution), so impact is arbitrary code execution. The issue exists in the package itself (not described as a sub-dependency), so it is a direct-dependency risk. The report gives no specific function names or config strings to match, so it cannot be objectively verified from the provided details, and no patch or fixed version is referenced, so remediation appears to require removing/replacing the malicious package. The package was recently flagged by OpenSSF (treated as a recent disclosure)."
  },
  "MAL-2025-6920": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported to execute commands associated with malicious behavior and communicate with a malicious domain, indicating arbitrary command execution and network activity. The report names the npm package itself (dagger-core) but provides no function names or code patterns to confirm automatically, and no patch or timeline is provided. While this could also affect projects that include it transitively, the writeup identifies the package itself as malicious so classification assumes direct inclusion."
  },
  "MAL-2025-6921": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package contains malicious code that communicates with a domain tied to malicious activity, which implies network callbacks/exfiltration (network-accessible) and primarily risks data confidentiality. The issue is in the listed package dessandro-classie (not described as a sub-dependency), so classified as a direct-dependency. The write-up provides no specific function name or domain string to search for nor any info about patches or exploitation, so verifiability is not possible from the provided text. No patch availability is stated; removing/replacing the package or blocking the domain are feasible mitigations without a confirmed patched release, so remediation is marked as workaround-available. Timing and exploitation status are not specified; treated as a newly reported malicious package (zero-day) given the lack of further temporal details."
  },
  "MAL-2025-6922": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package makes network requests to a domain tied to malicious activity, so the vector is outbound network communication. The issue is in the named npm package (device-intelligence) so it is a direct dependency when installed. The primary likely impact is information disclosure/data exfiltration given the package communicates with a malicious domain. The writeup does not include the specific malicious domain, code snippets, or function names, so the presence cannot be verified from code/config alone. No temporal or exploitation details are provided; treat as a recently reported malicious-package finding. Remediation is typically to update/remove the package or install a patched version if published."
  },
  "MAL-2025-6923": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "dpais-chat-template-pwa",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself is flagged as malicious and is reported to execute commands and communicate with a malicious domain. That indicates arbitrary code execution/run of commands and outbound network communication. The vulnerability is in the package named (so it would be present when the package is added as a direct dependency). The report does not list specific functions or configuration strings to confirm exact code paths, so verification is partial. No patch/clean version is mentioned in the report, so remediation is treated as unavailable from the package itself."
  },
  "MAL-2025-6924": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (electron-test-main@11.0.1) is identified as malicious and executes commands and contacts a malicious domain. That indicates arbitrary command execution capability (code execution) and outbound network activity. Because the issue is in the package itself it is a direct-dependency when included. The malicious behavior involves network communication, so the vector is network-accessible. The report gives no specific function names or configuration strings to search for, so the presence cannot be confirmed purely by a single code/config pattern in the provided details (non-verifiable). No remediation or patch information is provided in the writeup; removal/avoidance of the package is a viable mitigation without assuming a published patch (workaround-available). The package was newly flagged by OpenSSF analysis (recently identified as malicious), so it is classified as a zero-day by the available data."
  },
  "MAL-2025-6925": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "ember-lts-4.4",
    "verifiable_function": "fetch",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package contains malicious code that makes outbound network requests to a domain tied to malicious activity, which implies data exfiltration or communication with a command-and-control endpoint (data confidentiality impact). The issue is in the package itself (ember-lts-4.4) so it affects consumers that depend on that package (direct-dependency). The malicious behavior is observable as network communication, so the attack vector is network-accessible. No patch status is provided, so remediation by removing/replacing or blocking the package/domain is a viable mitigation without knowledge of an available fixed release. The report does not include a specific vulnerable function or domain, so verification is only partial (presence of network calls to a malicious domain would confirm it). Temporal classification marked as zero-day because the report describes a malicious package presence without information about established exploit campaigns or long-term documentation."
  },
  "MAL-2025-6926": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "active-exploitation",
    "reasoning": "The malicious behavior is in the listed package itself (epc-node-web-client) so it's a direct dependency. The package actively communicates with a domain linked to malicious activity, so the attack is over the network and most directly implies possible data exfiltration (confidentiality). The report does not name a specific vulnerable function or a patched version, so presence can't be confirmed by a single code/config indicator."
  },
  "MAL-2025-6927": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "eslint-config-i18n-scan",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The OSSF report identifies the npm package eslint-config-i18n-scan@10.0.2 as containing malicious code that executes commands and communicates with a malicious domain. This indicates network activity and execution of arbitrary commands when the package runs. The package name is explicitly provided but no specific vulnerable function or configuration string is described, so verification is incomplete."
  },
  "MAL-2025-6928": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "eslint-config-pcc-custom",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package contains malicious code that communicates with a domain associated with malicious activity, which indicates outbound network communication (exfiltration/command-and-control) and a direct malicious package (eslint-config-pcc-custom). No specific exploitation behavior, domain string, or function names were provided, so the primary confirmed impact is data confidentiality via network communication. The package is listed as an affected direct npm package."
  },
  "MAL-2025-6929": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself ('eslint-plugin-i18n-scan') is described as containing malicious code that executes commands and communicates with a malicious domain, which implies outbound network activity and arbitrary command execution capability. The issue is in the package itself (not described as a sub-dependency), so classified as a direct-dependency problem. No specific code patterns, function names, or configuration strings were provided in the report, so the presence of the malicious behavior cannot be confirmed purely by a deterministic code/config search in this writeup (non-verifiable). No fixed or patched version was referenced; removing or avoiding the package is the straightforward mitigation, so remediation is marked as workaround-available. The report is a detection of active malicious behavior but does not state known in-the-wild exploitation or an established long-term advisory, so it is treated as a recent/zero-day detection in this context."
  },
  "MAL-2025-6930": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "http",
    "verifiable_function": "http.request",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package (findsomeluck) itself contains malicious behavior that contacts a known-malicious domain, so the issue is in the directly used package and requires the package to be installed/run (local-only). Outbound communication to a malicious domain primarily risks data exfiltration (confidentiality). The report does not state a published patch, so no-fix-available is selected. The advisory gives no indication of long-term status or widespread exploitation, and such malicious-package discoveries are typically recent disclosures, so classified as zero-day. The condition can be partly confirmed by inspecting the package for outbound network calls or hardcoded malicious domains, but the writeup does not provide the specific domain or call site, so verification is partial."
  },
  "MAL-2025-6931": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "active-exploitation",
    "reasoning": "The package contains malicious code that communicates with a domain tied to malicious activity, which implies outbound network communication and potential data exfiltration. The issue is in the named package itself (not a transitive dependency), so it affects projects that directly depend on it. The provided report does not include specific code, function names, or configuration strings to search for, so the presence cannot be confirmed by static pattern matching from the writeup alone. No patch information was provided; removing or replacing the package is a feasible mitigation without knowing a fixed release. The package's active communication with a malicious domain indicates ongoing malicious behavior."
  },
  "MAL-2025-6932": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself ('gopro-plus-downloader' @13.0.1) is identified as containing malicious code that executes commands and contacts a malicious domain — indicating outbound network activity and arbitrary command execution capability within the package. This is an issue in the package itself (not described as a sub-dependency). The report does not provide specific function names, configuration strings, or a stated patch, so verification and remediation details cannot be confirmed from the writeup alone."
  },
  "MAL-2025-6933": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is identified as containing malicious behavior that executes commands and communicates with a malicious domain. That implies executable command invocation (indicative of child_process usage) and outbound network activity. It's a malicious package itself (affects projects that depend on it directly). Primary impact is arbitrary code execution. No patch/status was provided, so remediation by removing/replacing the package is the practical mitigation."
  },
  "MAL-2025-6934": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "instagram-basic-display-api",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package instagram-basic-display-api contains malicious code that communicates with a domain associated with malicious activity, which implies network-based exfiltration or command-and-control behavior (data confidentiality impact). Because the issue is in the named package itself, treat it as a direct-dependency issue. The presence of network communication makes the attack vector network-accessible. The report does not provide a specific function name, domain string, or remediation/publish status, so full automated verification is not possible; some indicators (package name and malicious network behavior) are present, so this is classified as partially-verifiable. A pragmatic mitigation (e.g., remove the package or block outbound requests) is available without knowing a patch, so remediation is marked as workaround-available. Temporal status is marked as zero-day due to lack of information about long-term history or patches in the writeup (no timeline or exploitation details were provided)."
  },
  "MAL-2025-6935": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "instagrambotlib",
    "verifiable_function": "https.request",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "active-exploitation",
    "reasoning": "The package itself (instagrambotlib) contains malicious code that reaches out to a domain tied to malicious activity, indicating a network-based malicious behavior likely used for data exfiltration. Because the malicious code resides in the package itself it affects projects that directly depend on it. The report names network communications (remote domain) so the attack vector is network-accessible. No patch or remediation detail is provided; removing or replacing the package (or blocking the domain) are practical mitigations rather than an in-place version bump. Verification can be done by inspecting the package source for network calls to the malicious domain, but the writeup does not include the exact domain or function names, so confirmation is only partial."
  },
  "MAL-2025-6937": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package (jenkins-trigger-action) contains and executes malicious commands and communicates with a malicious domain, indicating runtime code execution and network communication. The issue is in the package itself (package-level malicious code), so it affects the package when included as a dependency. The report does not provide specific function names or configuration strings to verify programmatically, nor does it state a patched version or exploitation timeline."
  },
  "MAL-2025-6939": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "makerjs-dev",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package makerjs-dev contains malicious code that communicates with a domain tied to malicious activity — indicating network calls to an external host and likely data exfiltration. The advisory names the specific package (makerjs-dev) but does not provide a function or code snippet to confirm the exact call, so verification is partial. No patch status is provided; immediate mitigation is typically to remove/replace the package (workaround) rather than rely on a known safe update."
  },
  "MAL-2025-6942": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package contains malicious code that communicates with a domain tied to malicious activity, indicating runtime network communication to an external, malicious host (network-accessible) and likely data exfiltration (data-confidentiality). The vulnerability is in the named package itself, so exploitation occurs when that package is directly used (direct-dependency). The writeup does not provide a specific function name or configuration string to search for nor any patch information, so verification via static code patterns cannot be determined here and remediation/temporal status are inferred conservatively."
  },
  "MAL-2025-6943": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package 'mint-backend' is reported to execute commands and communicate with a malicious domain, indicating outbound network activity and execution of arbitrary commands in the host environment. Because the malicious code is in the package itself, a project that directly depends on it would be affected (direct-dependency). No specific function names or config strings were provided, so the presence cannot be confirmed by a simple code/config search. No patch or remediation was mentioned; immediate mitigations (remove package, block domain, audit) are available without a specific update."
  },
  "MAL-2025-6946": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "pentest-event-emitter",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported to communicate with a domain tied to malicious activity, which implies outbound network activity that can be used for data exfiltration (information disclosure). The vulnerability is in the named npm package, so it affects projects that directly depend on it. The writeup does not include a specific function name or configuration string to search for, but the presence of malicious network communication is an observable indicator tied to the package, so the classification is partially-verifiable. No patch or fixed version is referenced in the details, so a fix cannot be assumed to be available."
  },
  "MAL-2025-6947": {
    "verifiability": "verifiable",
    "verifiable_package": "personalizationtrkserv",
    "verifiable_function": "child_process.exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "OpenSSF analysis states the package personalizationtrkserv@11.0.1 executes one or more commands and communicates with a malicious domain. That indicates the package itself contains malicious runtime behavior (vulnerability present in the package code) and that it performs network communication, and executes commands on the host (code execution risk). The package name is provided so the condition is verifiable by inspecting the package source for use of command-execution APIs and network calls. No information about an upstream patch or exploitation timeline is provided; removal or blocking of the package/domain are feasible mitigations without an upstream patch."
  },
  "MAL-2025-6948": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (pngquant-bin-static) is reported to contain malicious code that communicates with a malicious domain, indicating outbound network activity and potential data exfiltration. The vulnerability is in the package named (so it's a direct dependency when installed). The report does not provide a specific function, module call, or configuration string to search for, nor does it state a published patch or remediation timeline, so verification and remediation status cannot be confirmed from the writeup."
  },
  "MAL-2025-6949": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "project-bounty",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states project-bounty (npm) contains malicious code that communicates with a domain tied to malicious activity. This implies network activity (exfiltration/phone-home) so the attack vector is network-accessible. Because the malicious code resides in the named package itself, exploitation occurs when that package is installed/used (direct dependency). The primary impact is confidential data exposure (communication to a malicious domain). The writeup does not include a specific malicious domain, function name, or mention of a published fix, so the condition can be partly confirmed by inspecting the package (partially-verifiable) but cannot be fully verified from the report alone; no patch or remediation details are provided so no-fix-available is chosen. The finding appears to be a recent malicious-package detection without indication of established patches or long history, so it is classified as zero-day."
  },
  "MAL-2025-6950": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (project-luck) is reported to communicate with a domain tied to malicious activity, so the issue is in the direct dependency and is reachable over the network. That behavior can leak sensitive data (confidentiality). The report does not provide the exact domain or code indicators, so the condition can only be partially verified from the information given. No patch or remediation is mentioned in the writeup, so no fixed version is indicated."
  },
  "MAL-2025-6951": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "active-exploitation",
    "reasoning": "The report states the package itself (pydantic-settings) communicates with a domain tied to malicious activity, indicating outbound network activity that can exfiltrate data (data confidentiality). Because the issue is in the package named in the writeup, it affects projects that directly depend on it (direct-dependency). The description does not include a specific domain string, code snippet, or function name, so the presence of the malicious communication cannot be confirmed by a precise static code/config pattern from the provided details; therefore verifiability is set to non-verifiable. Removal or blocking of the package or egress network controls are feasible mitigations, suggesting workaround options, and the package behavior (communicating with a malicious domain) indicates active malicious use rather than an old/legacy bug, so it is classified as active-exploitation in temporal scope based on the provided summary."
  },
  "MAL-2025-6952": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "react-stickynod",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package (react-stickynod) contains malicious code that communicates with a domain tied to malicious activity, indicating network calls to an external host. That makes the issue reachable over the network and allows data exfiltration (confidentiality impact). The vulnerability is in the package itself (direct dependency). The report does not include the exact domain string or function names used, so confirmation requires inspecting the package code for the network calls or domain; therefore verification is only partial. No patch status was provided; removing or replacing the package is a viable mitigation without needing an immediate code change in the application."
  },
  "MAL-2025-6957": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The package is described as containing malicious code that communicates with a malicious domain, indicating outbound network activity (network-accessible) and likely data exfiltration (data confidentiality). The issue is in the named npm package itself (somemalicious), so exploitation occurs if that package is included (direct-dependency). The report gives no specific vulnerable function or configuration and does not state a patch is available, so remediation is not a simple in-place update and is treated as having no fix available in the package itself. No temporal details (recent disclosure or active exploitation) are provided."
  },
  "MAL-2025-6958": {
    "verifiability": "verifiable",
    "verifiable_package": "child_process",
    "verifiable_function": "exec",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is identified as containing malicious code that executes commands and contacts malicious domains. This is observable by presence of calls to Node's child_process APIs and the package name is explicit. Exploitation requires the package to be installed/loaded in a host environment (local execution of the package). Primary impact is arbitrary code execution. Mitigation can be accomplished by removing/replacing the package or blocking its network activity; no patch for this package was mentioned in the report. The report provides no timeline or evidence of active in‑the‑wild exploitation beyond the malicious behavior identification."
  },
  "MAL-2025-6959": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported to contain malicious code that communicates with a domain associated with malicious activity, which implies network traffic to an external host (network-accessible) and likely data exfiltration (data-confidentiality). The issue is in the named npm package (stellion-vidaxl-sdk), so classification as a direct-dependency is appropriate. The report contains no code-level indicators (no function names or config strings) or patch information, so objective verification from the provided text is not possible."
  },
  "MAL-2025-6961": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The advisory states the package (symphony-summary) contains malicious code that communicates with a domain associated with malicious activity — this implies network-based communication (network-accessible) and a direct malicious package in the project (direct-dependency). The primary impact indicated is communication with a malicious domain, consistent with potential data exfiltration (data-confidentiality). The report gives no function names or domain strings to allow a deterministic static match, so the condition cannot be verified from the provided details. No patch or remediation is described; typical mitigations include removing/replacing the package or blocking its network access, so a workaround is available. The advisory entry indicates the issue is documented (an identified malicious package), so it is classified as stable/mature rather than as a zero-day or actively exploited item based solely on the provided text."
  },
  "MAL-2025-6962": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package (thrivent-bank-wp) contains malicious code that communicates with a domain tied to malicious activity — this implies network-based contact (network-accessible) and potential data exfiltration (data-confidentiality). The issue is in the listed package itself (affected package name provided), so it is classified as a direct-dependency when included in a project. The writeup does not include a code snippet, function name, configuration key, or any patch information, so the presence cannot be confirmed by a specific code/config search in the provided details and remediation status is not stated. A practical mitigation (removing/replacing the package or blocking the domain) exists without requiring an upstream patch, so remediation is classified as a workaround."
  },
  "MAL-2025-6963": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "tiktok-dev",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "active-exploitation",
    "reasoning": "The report states the tiktok-dev package contains malicious code that communicates with a domain associated with malicious activity. That indicates the package, when executed, performs network communication (network-accessible). The issue is in the package itself (tiktok-dev), so it's classified as a vulnerability in the directly-affected package. The described behavior (communication with a malicious domain) most directly implies potential data exfiltration / confidentiality loss. Verifiability is marked partially-verifiable because the affected package name is given (tiktok-dev) but no specific hardcoded domain string, function, or configuration key is provided to allow a direct static search for the malicious indicator. The writeup provides no information about an available patch or remediation; absent any patch details, remediation is classified as no-fix-available. The package communicating with a known-malicious domain indicates active malicious behavior, so temporal classification is set to active-exploitation."
  },
  "MAL-2025-6964": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself (tiktok-prod) is the affected package (direct-dependency). The report states the package communicates with a domain associated with malicious activity, indicating a network-accessible vector and likely risk of data exfiltration (confidentiality impact). The writeup does not include a specific domain string, function name, or patch information, so the condition cannot be confirmed by a concrete code/config pattern (non-verifiable). As no patch or advisory is provided in the details, mitigation is likely achievable by removing/blocking the package or blocking the remote domain (workaround-available). The report appears to describe a newly-identified malicious package with no remediation details, so it is classified as a zero-day disclosure for temporal purposes."
  },
  "MAL-2025-6965": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "translatables",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The report states the translatables npm package contains malicious code that communicates with a domain associated with malicious activity, which indicates outbound network communication (network-accessible) that can exfiltrate data (data-confidentiality). The issue is present in the package itself (affected package: translatables), so classification as a direct-dependency is appropriate for projects that include it directly. Verifiability is limited because the writeup does not provide the exact domain string or specific function/API call; the package name is known so code inspection of that package can likely confirm the behavior (hence partially-verifiable). No patch or timeline information is provided, so remediation is characterized as a workaround being available (e.g., removing the package or blocking egress) rather than assuming a released patch; temporal classification is set to stable-mature because the writeup identifies a concrete malicious behavior but gives no indication this is a newly disclosed or actively exploited zero-day."
  },
  "MAL-2025-6966": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "variables.css",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The report states the variables.css package contains malicious code that communicates with a domain associated with malicious activity. This implies outbound network communication (network-accessible) and potential data exfiltration (data-confidentiality). The issue resides in the listed package itself (direct-dependency). The report does not include a specific function or domain string, so the presence of malicious behavior can be detected in package source but cannot be fully confirmed from the provided details (partially-verifiable). No patch or remediation is described, but mitigation is possible by removing or blocking the package/domain (workaround-available). There is no information about active exploitation or disclosure timing, so it is not classified as zero-day or active-exploitation (stable-mature)."
  },
  "MAL-2025-6967": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself contains malicious code that communicates with a domain associated with malicious activity, indicating outbound network communication (exfiltration). The vulnerability is in the listed package (vite-plugin-netx-project), so it affects projects that include that package (direct dependency). The primary impact is information disclosure/data exfiltration. The report gives no code snippets, domain name, or function names and therefore cannot be objectively confirmed from static code patterns alone; remediation details or patches are not provided in the writeup."
  },
  "MAL-2025-6968": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "simple-update",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package communicates with a domain associated with malicious activity, which implies a network-accessible channel that can exfiltrate information. The vulnerability is in the named package (a direct dependency). The writeup does not describe code execution, service disruption, or privilege escalation, so the primary impact is data confidentiality. No specific function name or domain string was provided, so the presence of the malicious communication cannot be confirmed from the provided text alone."
  },
  "MAL-2025-6969": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The report states the npm package vsts-powershell-task communicates with a domain associated with malicious activity, which implies network-based communication (network-accessible) and potential unauthorized data exfiltration (data-confidentiality). The issue is in the named package itself (direct-dependency). The write-up contains no code snippets, domain strings, function names, or configuration markers that would allow an objective code/config pattern check, so verifiability is marked non-verifiable. No patch or remediation status is provided; removing or replacing the package or blocking its network access are viable mitigations without seeing a listed fix, so remediation is classified as workaround-available. The vulnerability has a catalog identifier (MAL-2025-6969), indicating it has been documented rather than being an untracked disclosure, so it is classified as stable-mature in temporal terms."
  },
  "MAL-2025-6970": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "xor4096",
    "verifiable_function": "https.request",
    "exploitability_context": "runtime-critical",
    "attack_vector": "network-accessible",
    "impact_scope": "data-confidentiality",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "stable-mature",
    "reasoning": "The package contains malicious code that communicates with a domain associated with malicious activity, which implies outbound network communication (network-accessible) and potential data exfiltration (data-confidentiality). Because the malicious behavior is contained in the published npm package itself and manifests at runtime when the package is executed, it affects production execution paths (runtime-critical). The report names the affected package (xor4096) but does not provide specific function names or exact domain strings, so verification is only partial; looking for network request calls in the package (e.g., https.request/fetch) can indicate the behavior. No information about a published patch was provided, so remediation is conservatively marked as workaround-available (remove/replace the package or block egress) rather than asserting a direct fix. The writeup gives no timeline or evidence of active exploitation or patch maturity, so it is not classified as zero-day or actively exploited — treated as a stable/mature malware finding based on the available description."
  },
  "MAL-2025-6971": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is identified as malicious because it executes one or more commands; that indicates arbitrary code execution on any system that installs/runs the package. The report does not provide specific function names or configuration indicators, so the presence cannot be confirmed by searching for a particular code pattern. No patch or fixed version is mentioned, so remediation by updating is not indicated."
  },
  "MAL-2025-9864": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_chei",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the named npm package contains malicious code. The presence of a specific package name allows partial verification, but no specific malicious function or configuration is provided. A malicious package typically executes when installed or imported (local install/run), enabling arbitrary code execution in the consumer environment. Because the vulnerability is in the package itself, it affects projects that depend on it (direct-dependency). Remediation can usually be achieved by removing or replacing the package (workaround) rather than immediate code refactors. The disclosure appears to be a direct finding of malicious content (likely recently discovered), so classified as zero-day given no information about patches or established history."
  },
  "MAL-2025-9865": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_chi contains malicious code. That implies the risk is from installing/including the package (local execution of package code), so attack is local-only. The vulnerability is in the named package itself (an affected package listed), so classified as a direct-dependency issue for consumers who include it. \"Malicious code\" indicates potential arbitrary code execution (code-execution) risk. The writeup provides no specific function or configuration indicator, so the presence cannot be confirmed by a code pattern given here (no function name provided); likewise there is no information about a published patched version or exploit timeline. A practical mitigation is to remove or avoid the package (workaround) until a clean release is available."
  },
  "MAL-2025-9866": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package is reported to contain malicious code; that indicates arbitrary code execution when the package runs in an environment (runtime-critical) and requires the package to be present/executed on the host (local-only). The report gives no specific function or code pattern to confirm statically, so the finding cannot be verified by a named function or config here. Removal/replacement of the package is a practical mitigation without relying on a patched release. No details about active exploitation or patch availability are provided, so it's treated as a recently disclosed malicious package."
  },
  "MAL-2025-9867": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_chie contains malicious code. That implies arbitrary code can execute when the package is installed or required (local execution on systems that install the package). The package itself is the affected artifact (so impact applies to consumers that directly depend on it). The writeup does not cite a specific malicious function or configuration, so the presence cannot be verified by a named symbol or config string. Removing or replacing the package is an available mitigation without relying on an upstream patch. No timing or exploitation-in-the-wild details are provided, so this is treated as a newly reported malicious package."
  },
  "MAL-2025-9868": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package itself contains malicious code. There are no specific function names, configuration strings, or patch information in the writeup, so the presence of malicious behavior cannot be confirmed by a code/config pattern from this description alone (non-verifiable). Exploitation requires the package to be installed/used (local installation or inclusion as a dependency), so it is treated as a direct dependency risk and accessible via local installation rather than a network vector. Malicious packages typically enable arbitrary code execution when run or installed, so impact is classified as code-execution. The writeup provides no indication of an available patched release or remediation, so remediation is classified as no-fix-available based on the provided facts. No timing or exploitation-in-the-wild information is provided; the disclosure appears to be a recent finding in the package, so it is classified as zero-day given lack of evidence of stable remediation or active exploitation details."
  },
  "MAL-2025-9869": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_chig",
    "verifiable_function": "require(\"@zalastax/nolb-_chig\")",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_chig contains malicious code. Presence of the named package can be verified in source/control by detecting the package import/require. Because the malicious code lives in the package itself, it is a vulnerability in that package (i.e., affects projects that include it as a dependency). Malicious packages typically execute code when installed or required, so the primary attack vector is local (installation/runtime on an environment that installs or requires the package). The likely impact is arbitrary code execution because the package contains malicious code. No remediation or timeline details were provided in the writeup; removing or replacing the package is an immediate mitigation, so a workaround is available (explicit patch or safe-version was not specified). No temporal or exploitation details were given in the writeup; the package name/ID implies a recently reported malicious package, so this is classified as a zero-day disclosure in the absence of evidence of published patches or documented in‑the‑wild exploitation."
  },
  "MAL-2025-9870": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_chio",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the named npm package contains malicious code. Presence of the specific package name allows partial verification (package can be identified in a project), but no specific malicious function or behavior is described. As a malicious package, the primary impact is arbitrary code execution when the package runs (install-time or at runtime). Exploitation requires the package to be installed/used in the environment (local install or inclusion in the dependency tree), so classified as local-only and affecting a direct dependency. Because no patch or remediation details are provided, removal/replacement of the package is a feasible mitigation without an upstream update. Temporal classification is set as zero-day because the writeup indicates a direct finding of malicious content (no information about established remediation or historical status)."
  },
  "MAL-2025-9871": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_chip contains malicious code but provides no specific indicators (functions, files, or configuration entries). Presence of malicious code in a published npm package is typically triggered when the package is installed or required in a project (local install/import), and can allow arbitrary code execution. The affected package is the package itself (not described as a sub-dependency), so classification as a direct-dependency vulnerability is appropriate. No remediation or exploitation timeline information was provided, so remediation is classified as a workaround (remove/replace the package) and the disclosure is treated as a zero-day due to lack of patch status information."
  },
  "MAL-2025-9872": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_chix contains malicious code — that implies arbitrary code execution when the package is installed/loaded on a host (supply-chain/local execution). The vulnerability is in the named package itself (not described as a sub-dependency), so it's classified as a direct-dependency issue. No specific function names, indicators, or patch information are provided, so the presence of malicious behavior cannot be confirmed by a simple code/config search and must be validated by inspection/behavioral analysis. Removal or avoidance of the package is a feasible mitigation without knowing a patch; no patch information was given, so the timeframe is treated as a recent disclosure."
  },
  "MAL-2025-9873": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_chiy",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_chiy contains malicious code. That indicates arbitrary code execution is possible when the package is installed or executed, so impact is code-execution. The package itself is the affected artifact, so this is a direct-dependency issue for projects that include it. Malicious package execution typically requires the package to be installed or imported in the environment (local install/runtime), so attack vector is local-only. No specific malicious function or configuration is provided, so the condition can be confirmed by inspecting the package contents but not by a specific code pattern in the write-up; removing or replacing the package is a viable mitigation, so remediation is a workaround. The write-up gives no indication of active exploitation or published patches, and only states the package was found to contain malicious code, so classification as a recent discovery (zero-day) is used here. All conclusions are strictly based on the information given."
  },
  "MAL-2025-9874": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_chiz",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_chiz contains malicious code. Presence of malicious code in a package is typically executed on the host that installs or requires the package (local-only). The vulnerability resides in the named package itself (so classified as a direct-dependency). Malicious package contents imply arbitrary code execution risk. The writeup gives no function names or remediation details, so verifiability is limited to the package presence and manual inspection."
  },
  "MAL-2025-9875": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_chj",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the named npm package contains malicious code. Presence can be confirmed by inspecting the package contents (package name is known) but no specific malicious function or indicator is provided, so verifiability is partial. The malicious code resides in the package itself, so consumers that directly include the package are at risk (direct-dependency). Exploitation requires installing or running the package (local-only). Malicious code implies arbitrary code execution risk. Remediation is typically to remove/replace the package or unpublish/upgrade to a safe release (workaround-available) since no patch details were provided. No timing or exploitation-in-the-wild details were given; the finding is treated as a newly discovered malicious-package case (zero-day)."
  },
  "MAL-2025-9876": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_chk contains malicious code. That indicates the malicious payload resides in the package itself (a vulnerability in that package), which can be triggered locally when the package is installed or required — hence local-only and direct-dependency. The presence of malicious code implies potential arbitrary code execution. The writeup gives no function/config details, so the condition cannot be verified by a specific code or configuration pattern in this summary and no verifiable function can be named. No patch or timeline information is provided; immediate mitigation is to remove or replace the package (workaround) rather than relying on a known fixed release."
  },
  "MAL-2025-9877": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_co4",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package itself contains malicious code, which is typically executed locally (during install or at runtime when required) and can lead to arbitrary code execution. The issue is attributable to the named npm package, so it can be confirmed by inspecting that package's published files, but the writeup gives no specific malicious function or snippet — hence only partially verifiable."
  },
  "MAL-2025-9878": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_co_",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_co_ contains malicious code (indicating arbitrary code execution when the package is installed/imported). The package itself is listed as the affected package (so this is a direct dependency when used). Exploitation requires the malicious package to be present in the local project/environment (local-only). The writeup identifies the package but gives no function or code pattern details, so only partial verification is possible. No patch or timeline information is provided; mitigation is typically removal/avoidance of the package rather than relying on an update."
  },
  "MAL-2025-9879": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_coa contains malicious code. That indicates arbitrary malicious code can run in environments that install or import the package, so impact is classified as code execution. The vulnerability is tied to the named package itself (affects that package), so it's treated as a direct-dependency risk for projects that include it. Triggering such malicious package behavior typically occurs on the host that installs or requires the package (install-time or runtime on the local system), so attack vector is classified as local-only. No specific functions, configuration strings, or remediation details were provided in the writeup, so the presence of malicious code cannot be confirmed by a specific code/config fingerprint here (non-verifiable). Because no patch or remediation was described, mitigation by removing or replacing the package is the practical immediate option (workaround-available). The report gives no timeline or evidence of in-the-wild exploitation or published patches; it is therefore treated as a newly-flagged malicious package (zero-day) for the purposes of this classification."
  },
  "MAL-2025-9880": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_cob",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_cob contains malicious code. That implies arbitrary code can execute when the package is installed or required (code-execution). Exploitation requires the package to be present in a project (direct-dependency). The malicious behavior is triggered locally by installing/including the package (local-only). The package name is provided but no specific malicious function or configuration is identified, so verification is partial. No patch information is given; removing or replacing the package is a feasible mitigation, so workaround is indicated. The disclosure appears to be a new finding in the package repository, so classified as zero-day given no further temporal details."
  },
  "MAL-2025-9881": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_coc",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states that the package @zalastax/nolb-_coc contains malicious code but gives no specifics about functions, trigger conditions, or patches. Presence of the named package in a project's dependencies can be checked (hence partially-verifiable), but no specific malicious function or config string is provided. Malicious package code typically executes on the host when installed or required, so the primary attack vector is local (install/runtime on a developer/CI/host). The direct affected artifact is the package itself (classification as a direct-dependency vulnerability rather than a transitive-specific description). Containment of arbitrary malicious code implies potential arbitrary code execution. Because no patch or upstream remediation is described but removal/avoidance of the package is an immediate mitigation, remediation is classified as workaround-available. The advisory gives no timeline or exploitation details and appears to be a newly reported malicious package, so it is classified as a zero-day disclosure in the absence of further info."
  },
  "MAL-2025-9882": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states that the package @zalastax/nolb-_cod0 contains malicious code. That indicates arbitrary actions can occur when the package is installed or executed in a consuming project (local installation/runtime), so the primary impact is potential arbitrary code execution. The issue is in the package itself (not described as a sub-dependency), so classified as a direct-dependency issue. The writeup provides no specific function names or configuration strings, so the presence of the malicious behavior cannot be confirmed by a simple code/config pattern search in the report alone (non-verifiable). No patch or exploit timeline is provided; common immediate mitigation is removal or replacement of the package, so a workaround is available. The package appears to be a newly reported malicious package (no mature documentation or patch information provided), so classified as zero-day."
  },
  "MAL-2025-9883": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compa contains malicious code. That indicates arbitrary code execution when the package is installed or imported (local execution). The issue resides in the package itself (not described as a sub-dependency), and no specific malicious function or trigger was provided, so exact verification details are not available. Removal or avoiding installation is a practical mitigation."
  },
  "MAL-2025-9884": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_compai",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compai contains malicious code (a malicious package itself). That indicates the malicious code would execute on the host that installs or imports the package (local execution), and the vulnerability is in the package itself (not described as a sub-dependency), so treated as a direct-dependency issue. Malicious code in a package implies potential arbitrary code execution. The writeup does not supply function names or configuration indicators, nor details about patches or active exploitation; removal or avoidance of the package is an available mitigation, so remediation is classified as a workaround. Temporal classification is set to zero-day because the report describes discovery of malicious code in the package without information about established patches or long-term documentation."
  },
  "MAL-2025-9885": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_compai_",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compai_ contains malicious code. That implies arbitrary code could run when the package is installed/required in a local development or CI/runtime environment, so the primary impact is code execution. The vulnerability is in the package itself (i.e., the affected package listed), so it is classified as a direct-dependency issue for projects that include this package. The advisory gives no specific trigger or network vector, so classification as local-only is used (execution requires the package to be present/installed). The writeup does not identify specific functions or configuration strings, so full automated verification is not possible; only the package name is provided (hence partially-verifiable). No remediation or timeline details are provided; removing or not installing the package is a practical mitigation, so a workaround is noted, and the disclosure appears to be a recent package compromise (treated as zero-day in absence of patch/ historical context)."
  },
  "MAL-2025-9886": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_compai_fi",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compai_fi contains malicious code (package-level compromise). That can be confirmed by inspecting the package contents (package name is provided) but no specific malicious function or config string is given, so verification is partial. Because the malicious code resides in the package itself it affects projects that include that package (direct dependency). Typical malicious packages execute code when installed or required, so the primary attack vector is local (install/runtime) and the likely impact is arbitrary code execution. Remediation usually involves removing or replacing the package (a workaround) rather than a simple upstream version bump; no exploit timeline or active exploitation details were provided, so it is classified as a zero-day/newly reported malicious package."
  },
  "MAL-2025-9887": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states that the npm package @zalastax/nolb-_compai_t contains malicious code. No specific functions, configuration keys, or exploitation details are provided, so the condition cannot be confirmed by scanning for a particular symbol (non-verifiable). Because the malicious code resides in the package itself it is classified as a direct-dependency issue. Exploitation requires the package to be installed/imported and run in the victim environment (local/CI/runtime of the dependent project), so the attack vector is classified as local-only. A package containing malicious code most directly enables arbitrary code execution when executed/imported, so impact is code-execution. Typical immediate remediation is to remove or replace the package or block its installation (a practical mitigation without relying on an upstream patch), so remediation complexity is marked as workaround-available. The vulnerability appears to be a recent discovery of a malicious package (MAL-2025-9887), so it is classified as a zero-day disclosure in the absence of information about patches or active exploitation."
  },
  "MAL-2025-9888": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compai_u contains malicious code. That implies arbitrary code execution when the package is installed or required (local execution on the host). The vulnerability is in the package itself (i.e., the affected package), so classification as a direct-dependency issue is appropriate when a project depends on it. No specific function names or configuration strings are provided, so the presence of malicious behavior cannot be confirmed by static pattern matching in code (non-verifiable). Removing or replacing the package is a viable mitigation without waiting for a patch (workaround-available). The writeup gives no timeline or evidence of in-the-wild exploitation; such malicious-package findings are typically new discoveries, so classified as zero-day given the limited information."
  },
  "MAL-2025-9889": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states the package @zalastax/nolb-_compan contains malicious code. There are no indicators (function names, config keys, or behavioral details) to allow code-level verification, so verifiability is marked non-verifiable. The issue is in the named npm package itself (not described as only a sub-dependency), so classified as a direct-dependency. Malicious package code typically executes on the host when installed or required, so the attack requires local installation/execution (local-only) and implies arbitrary code execution. The writeup gives no information about a published fix or safe upgrade, so remediation is marked as no-fix-available. No timeline or exploitation data is provided; because this is presented as a newly identified malicious package with no patch information, temporal classification is set to zero-day."
  },
  "MAL-2025-9890": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states that the package @zalastax/nolb-_compar contains malicious code; no specific malicious function, configuration setting, or exploitation details are provided. Because the package itself is malicious, the vulnerability exists in that package (direct-dependency). Execution of the malicious code requires the package to be installed or imported locally (local-only). Presence of malicious code implies potential arbitrary actions when the package runs, so code execution is the primary impact that can be inferred. The report gives no information about a fixed release, so mitigation can typically be achieved by removing or replacing the package without requiring a codebase rewrite (workaround-available). The disclosure appears to be a recent discovery of a malicious package rather than a long-known or documented vulnerability (zero-day). Verifiability is marked non-verifiable because the writeup does not include any specific function name or configuration string to search for in source to conclusively confirm the malicious indicator."
  },
  "MAL-2025-9891": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compas contains malicious code. No specific function names, configuration strings, or exploitation details are provided. Presence of malicious code in a packaged library is typically triggered when the package is installed or required (local install/runtime), so the attack vector is classified as local-only. Because the issue is in the package itself, it is treated as a vulnerability in a direct dependency. Malicious code implies arbitrary code execution capability within the context the package runs, so impact is classified as code-execution. Verifiability is marked non-verifiable because no specific code patterns, function names, or config indicators were supplied to allow deterministic code/config checks. Remediation is classified as workaround-available because the immediate, factual mitigations are to remove/replace or avoid installing the package; no information about a patched version is provided. Temporal classification is set to zero-day because the writeup provides no information about patch availability, exploitation in the wild, or long-standing documentation; it appears to be a newly observed malicious package."
  },
  "MAL-2025-9892": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_compe",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compe contains malicious code. This indicates malicious payload in the package itself (affecting the package artifact), which is most directly relevant when that package is installed/imported (local install/runtime). The presence of malicious code typically enables arbitrary code execution. No specific function, indicator string, exploit path, or remediation details were provided in the writeup, so some judgments are conservative and based only on the stated fact of malicious code in the package."
  },
  "MAL-2025-9893": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_compf contains malicious code but provides no specific code patterns, functions, or exploit details. Because the malicious code is in the package itself, the vulnerability is tied to the package when it is installed/loaded (direct-dependency) and would require the package to be present/executed on the host (local-only). Malicious package contents imply potential arbitrary code execution. No function or configuration string is provided for deterministic detection, and no patch information is given; removal or avoidance of the package is a viable mitigation, and the disclosure appears to be a recent discovery."
  },
  "MAL-2025-9894": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_conm",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_conm contains malicious code. Presence of that package in a project is an objective indicator but the writeup gives no specific malicious function or trigger, so full automated confirmation of the exact malicious behavior is not possible from the text alone. Because the package itself is the affected component, the issue is tied to that package (i.e., a direct dependency when present). Malicious package code typically runs on install or when imported, which requires the package to be present locally; the report does not describe a remote network vector or a need for user-supplied input. Malicious code implies potential arbitrary code execution. The writeup does not state whether a fixed version exists, so the safest practical remediation is to remove or replace the package (workaround) rather than assume a simple patched update. The advisory gives no timing or exploitation details; this appears to be a newly-flagged malicious package rather than a long-documented legacy issue."
  },
  "MAL-2025-9895": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_conn contains malicious code. Such malicious package code typically executes on installation or when the package is required/used locally, so exploitation requires including/installing the package (local-only). The vulnerability is in the package itself (the affected package is listed), so the issue is in that dependency (classified as direct-dependency). Malicious code implies arbitrary code execution potential. The writeup contains no specific function or configuration indicator, no info about patches or exploitation in the wild, so verifiability and temporal classification are conservative and limited by available facts."
  },
  "MAL-2025-9896": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_cono",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report names a specific malicious npm package (@zalastax/nolb-_cono) but provides no details about exact malicious routines, execution timing, or presence of a patch. Verifiability is set to partially-verifiable because the package identity is known (allowing code inspection to confirm), but no specific function or config string is supplied to confirm automatically. The vulnerability is in the named package itself (direct-dependency). Malicious package code typically executes on machines that install or require the package (local/CI context), so attack vector is classified as local-only. Malicious code implies arbitrary code execution potential, so impact is code-execution. Without information about a patched release, the safest remedial classification is workaround-available (remove/replace/block the package or pin/republish safe alternative) rather than assuming a direct patch; this reflects that mitigation is typically possible by removing the package. Temporal classification is zero-day because the writeup indicates discovery of malicious code but gives no indication of long-term documentation or known in-the-wild exploitation."
  },
  "MAL-2025-9897": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_cop",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_cop contains malicious code. That implies arbitrary code execution when the package is installed or required by a project (local inclusion). The issue is tied to the package itself (affected package listed), so it is most relevant when that package is a direct dependency. No specific malicious function, install hook, or network trigger is described, so verification is incomplete. Removing or replacing the package is a viable mitigation without waiting for a specific patch. No temporal details or evidence of active exploitation are provided, so the disclosure is treated as a newly reported (zero-day) malicious package."
  },
  "MAL-2025-9898": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_cor",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_cor contains malicious code. That indicates a supply-chain/published-package compromise which is exploitable when the package is installed and/or executed locally (local-only). The vulnerability is in the named package itself (direct-dependency). Malicious package content implies potential arbitrary code execution when the package runs. The report gives no function-level indicators or timing/patching details."
  },
  "MAL-2025-9899": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_cum contains malicious code. That indicates arbitrary code can run when the package is installed or required (local execution), and the affected component is the package itself (direct dependency). No specific function or configuration is provided to confirm exact behavior, so the presence cannot be objectively verified from the writeup alone. Remediation can be achieved by removing or avoiding the malicious package (workaround) but no patch information is given. The disclosure appears to be a newly identified malicious package rather than a long-documented issue, so it is classified as a zero-day disclosure in absence of evidence of patches or widespread exploitation."
  },
  "MAL-2025-9900": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "transitive-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states the package @zalastax/nolb-_cun contains malicious code with no technical details. There is no function or config named to allow deterministic code-based verification, so verification is non-verifiable. A malicious npm package requires being installed/introduced into a project (local presence) and is typically encountered via the dependency tree (direct or transitive); given no information about direct usage, classification as a transitive-dependency is conservative. Malicious package contents imply potential arbitrary code execution. No patch or safe version is referenced in the report, so remediation is treated as no-fix-available in the absence of further info. No timeline or exploitation data provided, so treated as a newly-disclosed malicious package (zero-day) for the purpose of this classification."
  },
  "MAL-2025-9901": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states a specific npm package (@zalastax/nolb-_cuo) contains malicious code. That indicates the issue exists in the package itself (a direct dependency) and will be triggered when the package is installed/imported on a victim system (local installation/runtime), so classification as local-only and direct-dependency is appropriate. Because the package contains arbitrary malicious code, the primary impact is arbitrary code execution on hosts that run/install it. The writeup gives no function names, configuration indicators, or technical details that would allow an objective code/config pattern check, so verifiability is set to non-verifiable and verifiable fields are 'none'. Removing/replacing the package or avoiding installation is a practical mitigation, so remediation is categorized as workaround-available rather than assuming an available patched version. The advisory gives no timing or exploitation details; this appears to be a current discovery of malicious code in a package (not documented as long-standing or actively exploited here), so it is classified as zero-day given the lack of established remediation or exploitation history in the provided text."
  },
  "MAL-2025-9902": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_cup contains malicious code (indicating arbitrary/malicious code execution in environments where the package is installed). The entry names the specific package itself (so the issue is with that package rather than a sub-dependency). The writeup provides no specific function names, indicators, remediation, or evidence of remote exploitation, so verification cannot be made from the supplied details and no patch/fix information is given. Classification avoids assumptions about transitive use, specific exploit vectors, or available fixes."
  },
  "MAL-2025-9903": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_danh contains malicious code but provides no details about specific malicious functions, configuration strings, or exploit delivery. Because the package itself is malicious, the primary risk is execution of arbitrary/malicious code when the package is installed or required (local execution on build/runtime hosts). The affected item is the named package (i.e., the package itself would be included directly by a consumer), so it's classified as a direct-dependency issue. No fix or patch is described in the writeup, so remediation is recorded as no-fix-available. There is no temporal or exploitation-in-the-wild data in the writeup; this is treated as a newly reported malicious package (zero-day) until further disclosure/patching information is provided."
  },
  "MAL-2025-9904": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dani contains malicious code. That implies arbitrary code execution within any environment that installs or runs the package (local execution context). The issue is located in the package itself (i.e., the vulnerable code lives in that package), so classification as a direct-dependency is appropriate. No specific function, trigger, or configuration was provided, so the presence and trigger cannot be verified from the writeup alone. Removing or avoiding the package is a viable mitigation without an update; no patching status was provided, and the report reads as a recent disclosure, so treated as zero-day for temporal classification."
  },
  "MAL-2025-9905": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_danj contains malicious code. That implies an attack requires the package to be present in the environment (local-only) and the malicious code lives in the package itself (direct-dependency). Malicious package contents generally enable arbitrary actions when executed, so the primary impact is classified as code-execution. The writeup provides no specific function names, install script, or timing/patch information, so verifiability and temporal classification are conservative. Removing or replacing the package is a practical mitigation, so remediation is classified as workaround-available."
  },
  "MAL-2025-9906": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "config",
    "verifiable_function": "postinstall",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dank contains malicious code in the package itself. Such malicious packages are observable in the package contents (e.g., install/runtime scripts) so confirmation is possible but the writeup gives no specific function or file, so verifiability is partial. Because the issue is in the published package, it affects that package directly (direct-dependency). Malicious package code typically executes on the host that installs or requires the package (local execution/install-time), so attack vector is local-only. The primary risk from embedded malicious code is arbitrary code execution; no specific impact details were provided. No patch or fixed version is mentioned, so remediation is best achieved by removing or replacing the package (workaround available) rather than assuming a safe version exists. The report provides no timing or exploitation details; this appears to be a newly-identified malicious package so it is classified as a zero-day discovery for urgency purposes."
  },
  "MAL-2025-9907": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "@zalastax/nolb-_danl",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_danl contains malicious code. That is a vulnerability present in that package itself (direct-dependency). Verification can be done by finding the dependency entry in a project's package.json (hence verifiable via config). Malicious package code executes locally when installed or required, so the exploitation vector is local-only. The presence of arbitrary malicious code implies potential arbitrary code execution. No specific patch or remediation was provided in the writeup, but projects can mitigate by removing/replacing the package (workaround). The report gives no temporal details; the package was identified as malicious (treated as a recently disclosed malicious package)."
  },
  "MAL-2025-9908": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_datar contains malicious code. That implies arbitrary code execution can occur in any environment that installs or requires the package (supply-chain/local install). Because the package itself is the actor, the vulnerability is relevant when the package is a direct dependency. The writeup provides no specific function names, scripts, or configuration strings to identify the malicious behavior, so objective verification from the brief report is not possible. No patch or remediation is mentioned; however, removal or replacement of the package is a viable mitigation without requiring codebase changes."
  },
  "MAL-2025-9909": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_datas",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_datas contains malicious code. Presence of that package in a project can be detected in package manifests/lockfiles (so some verification is possible) but no specific malicious function or install hook is named in the writeup, so full code indicators cannot be confirmed. The malicious code would execute locally when the package is installed or required, allowing arbitrary code execution. The vulnerability is located in the package itself (not described as a sub-dependency). Removal or replacement of the package is a practical mitigation; no patch status or in-the-wild exploitation details were provided."
  },
  "MAL-2025-9910": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_datat",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself contains malicious code (so the primary risk is arbitrary code execution when the package is installed or required). The vulnerability is in the listed package (not a transitive package), so it's a direct-dependency issue. Exploitation typically occurs when the package is installed or executed locally (install scripts or require-time payloads), so the attack vector is local-only. No specific vulnerable function or config was provided, but the package name is known, so verification is partial. No patch or remediation details were provided; removing or replacing the package is a practical mitigation, so remediation is classified as a workaround. The report gives no timeline or evidence of in-the-wild exploitation, so it's treated as a recent disclosure (zero-day) given the presence of malicious code and lack of published remediation details."
  },
  "MAL-2025-9911": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_datau",
    "verifiable_function": "inspect package contents",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_datau contains malicious code. That can be confirmed by inspecting the package contents (so some verification is possible) but no specific malicious function or install hook is provided, therefore partially-verifiable. The issue is in the package itself (affected package named), so classified as a direct-dependency issue. Malicious package code typically executes on the machine where the package is installed or required, so the primary attack vector is local execution after installation. Malicious code implies potential arbitrary code execution. No patch or remediation details are provided in the writeup; removing or replacing the package is a viable mitigation, so remediation is classified as workaround-available. The disclosure appears to be a direct discovery of malicious code with no timeline given, so it is treated as a recent/new finding (zero-day) for temporal classification."
  },
  "MAL-2025-9912": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_de",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package @zalastax/nolb-_de contains malicious code. This implies the threat is introduced by installing/including that package (local installation/runtime of the package) and can enable arbitrary code execution. The package name is a clear indicator but no specific malicious function or script is detailed, so full static verification of a particular code path isn’t possible from the writeup alone."
  },
  "MAL-2025-9913": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_dev8",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dev8 contains malicious code. That implies arbitrary malicious behavior when the package is installed or executed (hence code execution risk). The vulnerability is located in the named npm package itself (affects projects that include that package directly). Malicious package code typically runs on the host where the package is installed or imported, so the attack requires local installation/execution. No specific function, file, or install-script was provided in the writeup, so exact indicators are incomplete."
  },
  "MAL-2025-9914": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself contains malicious code, which implies arbitrary code can run when the package is installed or required (code-execution). The vulnerability is in the package listed (a direct dependency). No specific indicators (function names or config strings) are provided in the report, so the presence of the malicious behavior cannot be confirmed by static code/config patterns alone. No patch or remediation details are included, so safest mitigation is to remove/replace the package (workaround). The report gives no timeline or exploitation details; treated as a newly discovered malicious package (zero-day) for temporal classification."
  },
  "MAL-2025-9915": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_devb",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_devb contains malicious code. This indicates arbitrary code execution risk when the package is installed or required (code-execution). The vulnerability is in the package itself as reported, so classification as a direct-dependency issue is appropriate. Malicious package code typically executes on the consumer's machine during install or import, so the primary attack vector is local (installation/import), not a network request or user-supplied input. The report gives no specifics about functions or config keys, so only a partial static verification is possible by locating the package and inspecting its contents. No patch or timeline information is provided; the classification opts for a recent-disclosure posture given the nature of malicious-package incidents."
  },
  "MAL-2025-9916": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_devc",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_devc contains malicious code. Presence of a malicious npm package is typically verifiable by inspecting the package contents (but no specific function or config was provided), it affects projects that directly depend on the package, and malicious package code commonly executes on install or when required, which requires local install/runtime access. The primary impact is arbitrary code execution by the malicious payload. No patch or remediation detail was provided, so removing or replacing the package is the practical mitigation (workaround) until a trusted fix is available. The report appears to be a newly reported malicious package rather than a longstanding/actively exploited incident in the wild, so it is classified as a zero-day disclosure based on the limited information available."
  },
  "MAL-2025-9917": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the npm package @zalastax/nolb-_devd contains malicious code. That indicates the malicious payload runs in the environment where the package is installed/used (local execution) and therefore can lead to arbitrary code execution. The issue is in the package itself (not a transitive detail). The writeup provides no function names, configuration strings, or temporal details, so exact verification and timing cannot be established. Removal or replacement of the package is a practical mitigation without relying on a patched release."
  },
  "MAL-2025-9918": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_devu contains malicious code (no specific malicious functions or behaviors are provided). Malicious package code typically results in arbitrary code execution in any environment that installs or requires the package, so the primary impact is code execution. Exploitation requires the package to be present in the project (directly installed or required), so the context is the affected package itself (direct-dependency) and the vector is local (install/require/execution of the package on the host). Verifiability is limited because no specific file, function name, or config string is provided — the package name is known but the exact indicator of maliciousness is not described. No remediation or patch is referenced; practical mitigation is to remove/avoid the package (workaround). The report indicates a discovered malicious package rather than a long-documented issue, so it is treated as a recent disclosure (zero-day)."
  },
  "MAL-2025-9919": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_devv",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_devv contains malicious code. This is directly attributable to that package (the malicious code resides in the package itself), and execution of that code would occur locally when the package is installed or required. The presence of malicious code implies potential arbitrary code execution. The report does not include a specific function, install hook, or network trigger, nor any information about patches or exploitation in the wild, so verifiability and temporal classifications are conservative."
  },
  "MAL-2025-9920": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states the package @zalastax/nolb-_devw contains malicious code, with no specific functions, indicators, or remediation mentioned. That prevents pattern-based verification. Malicious package code typically executes when the package is installed or required, so the most direct access vector is local (installation/import) and the impact is arbitrary code execution. Because no patch or safe version is referenced in the writeup, the remediation is marked as unavailable here. The disclosure appears to be a newly identified malicious package (no timeline or exploit details provided), so it is conservatively treated as a zero-day discovery."
  },
  "MAL-2025-9921": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_devx",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_devx contains malicious code but gives no details about the specific payload, entry point, or exploit vector. Because the package itself is malicious, compromise would occur when the package is installed or executed in a local project (local-only) and the package would be a direct dependency if explicitly included. The likely impact is arbitrary code execution by the malicious package. There are no details about a fixed version; removal/avoidance of the package is a viable mitigation without requiring a vendor patch. Lack of function-level or configuration details prevents a fully verifiable classification, and no information about active exploitation or patch timing is provided, so this is treated as a newly discovered (zero-day) malicious package."
  },
  "MAL-2025-9922": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states the package @zalastax/nolb-_dex contains malicious code. That implies arbitrary/malicious code can run when the package is installed or executed (code-execution) and requires inclusion/installation (local-only). The vulnerability is associated with the package itself (treated as a direct dependency if installed). No function names, strings, or configuration indicators were provided, so the condition cannot be objectively verified from the writeup. No patch or remediation details were given; removing or replacing the package is a practical mitigation without an official fix, so remediation is classified as a workaround. The disclosure contains no information about in-the-wild exploitation or patch availability, so it is treated as a recent (zero-day) malicious package report."
  },
  "MAL-2025-9923": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_dey",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_dey contains malicious code. That indicates arbitrary code in the package can execute when the package is installed/imported (runtime-critical) and leads to arbitrary code execution impact. Exploitation requires the malicious package to be present in the local dependency tree (local-only). The package name is provided so the presence of the malicious package can be identified, but the writeup gives no specific malicious function or script to search for and no patch information, so verification is partial and remediation details are unknown; removal/replacement of the package is a feasible mitigation."
  },
  "MAL-2025-9924": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "@zalastax/nolb-_dez",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package @zalastax/nolb-_dez contains malicious code. Presence of that specific package in a project's dependency manifest or node_modules can be objectively checked and the package contents inspected, so verification is possible. Because the malicious code resides in the package itself it affects consumers that include/import that package (direct dependency). Exploitation requires the package to be installed and its code executed in the local environment (install/import/runtime), so the attack is local-only. The presence of malicious code implies potential arbitrary code execution. A practical remediation is removing or replacing the package (workaround) rather than an immediate guaranteed upstream patch; no patch or timeline information is provided in the writeup, so the disclosure is treated as a recent/unknown-time discovery (zero-day)."
  },
  "MAL-2025-9925": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_df",
    "verifiable_function": "@zalastax/nolb-_df",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_df contains malicious code (indicative of arbitrary code running in the host environment). Presence of the malicious package can be confirmed by finding the package in package.json or node_modules (so verifiable). Because the malicious code resides in the package itself, the issue is tied to that package (direct-dependency). No details are provided about network triggers, specific malicious behaviours, or available patches; removing or replacing the package is a viable mitigation, and the report appears to describe a newly discovered malicious package (no exploitation timeline or patch status given)."
  },
  "MAL-2025-9926": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_digil contains malicious code (indicating arbitrary/unauthorized code execution risk) and lists that package as affected (a direct dependency). There are no details about trigger conditions or specific functions/configuration, so the vulnerability cannot be confirmed by a code/config pattern here. Because the malicious code resides in the package distributed to and run on the host that installs/uses it, the vector is classified as local-only. No patch or timeline information was provided, so temporal classification is set to zero-day as a conservative indication of recent discovery. Remediation is classified as workaround-available since removal or replacement of the malicious package is a viable mitigation without necessarily requiring an upstream patch, but a definitive patched version was not indicated."
  },
  "MAL-2025-9927": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_digim",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states the npm package @zalastax/nolb-_digim contains malicious code. That implies arbitrary code execution when the package is installed or required (local execution on developer/CI machines), so the primary impact is code execution. Because the vulnerability is in the named package itself, it is a direct-dependency risk for projects that depend on it. The report contains the package identifier but provides no file-level indicators or function names, so confirmation of the malicious code requires inspecting the package contents (some verifiable indicator exists but is not provided), giving a partially-verifiable classification. Mitigation is typically achievable by removing or blocking the package (a workaround) rather than a large architectural change; no patch/version info was provided, so a simple update cannot be assumed. No timeline or exploitation details were provided; this appears to be a newly-identified malicious package, so it is classified as a zero-day disclosure for the purposes of this assessment."
  },
  "MAL-2025-9928": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_digin contains malicious code (malicious package in npm). This indicates arbitrary code execution risk when the package is installed or required (local execution on install/runtime). The affected package is the package itself (classification as a direct-dependency issue for projects that include it). No specific function names, code patterns, or configuration strings were provided, so the presence cannot be objectively verified from the writeup alone. No remediation or timeline details were provided; removing or replacing the package is a straightforward mitigation, so a workaround is indicated. Temporal classification set to zero-day because the report gives no history or evidence of prior documentation or known exploit timeline (treated as a newly reported malicious package)."
  },
  "MAL-2025-9929": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_digio",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report identifies a specific npm package (@zalastax/nolb-_digio) as containing malicious code. Presence of malicious code in a package is best treated as potentially enabling arbitrary code execution when the package is installed/required (local execution context). The package is named explicitly (so the issue applies to that package as a dependency of a project). There is no detail about a specific function, trigger, network vector, or confirmed in-the-wild exploitation or patch availability, so verification is partial and remediation is likely via removal/replacement rather than an assured upstream patch."
  },
  "MAL-2025-9930": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_digip",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_digip contains malicious code (malicious package). That indicates arbitrary code in the package can execute on any environment that installs/loads it, so the primary impact is code execution. Exploitation requires installing or running the package (local install/runtime), so attack vector is local-only. The vulnerability is present in the package itself (not described as a sub-dependency), so classified as a direct-dependency issue. The writeup names the package but provides no function or technical indicators and gives no remediation or timeline details, so verifiability is partial and remediation/temporal classifications are conservative (workarounds like removal are possible; discovery appears recent but no exploitation/patch details provided)."
  },
  "MAL-2025-9931": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_digp contains malicious code (i.e., the malicious code resides in the published package itself). That makes it a vulnerability in the package artifact (direct-dependency) and implies code can execute on the host that installs or runs the package (local execution/install-time or runtime execution). The primary impact is arbitrary code execution. The writeup provides no function/config indicator to verify the exact malicious call patterns, no mention of an available patch or safe published replacement, and no timeline or evidence of active exploitation, so classifications reflect only the facts given."
  },
  "MAL-2025-9932": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_digs",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_digs contains malicious code but provides no details about specific malicious functions, triggers, or exploit delivery. Malicious code in a packaged dependency typically executes on the host when the package is installed or required, so access is local (occurs when the package is present on the filesystem/runtime) and can allow arbitrary code execution in the process. Because the report names the package but gives no function/config indicators or patch status, the presence is only partially verifiable from the provided data."
  },
  "MAL-2025-9933": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_digt",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_digt contains malicious code. This implies arbitrary code execution when the package is installed or executed on a host (local-only). The vulnerability is in that package itself (affected package named), so it is relevant when that package is a direct dependency. The exact malicious routine or entrypoint is not described in the report, so verification requires inspecting package contents (partial certainty). Removing or avoiding the package is a practical mitigation without assuming an upstream patch. No temporal/exploitation details were provided, so treated as a newly reported malicious package."
  },
  "MAL-2025-9934": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_digv",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_digv contains malicious code but provides no code snippets, function names, or timeline. Presence of malicious code in a published npm package is confirmed at the package level (package name is specified) but no specific vulnerable function or configuration string is given, so full code-level verification isn’t possible. Malicious package code executes when the package is installed or required (local execution context), which most directly maps to arbitrary code execution. The vulnerability is located in the package itself (affects that dependency directly). No remediation or patch information was provided, but removing or replacing the package is a viable immediate mitigation without a formal patch (workaround). No temporal details were included; the package is treated as a newly reported malicious package (zero-day) in absence of further info."
  },
  "MAL-2025-9935": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dm contains malicious code but provides no code samples, function names, or configuration indicators. That prevents objective, pattern-based verification of a specific vulnerable function or config (hence non-verifiable). Because the malicious code is in the package itself it is a direct-dependency risk to any project that installs or requires this package; typical malicious-package activity executes locally during install or when the package is required, so the primary attack vector is local installation/execution. The likely impact of embedded malicious code is arbitrary code execution on affected hosts. A practical mitigation is removal/replacement of the package or blocking its installation (workaround) rather than an assured upstream patch (no patch information provided). The report gives no timing or exploitation timeline, but the finding reads as a recent discovery of malicious content (classified here as zero-day)."
  },
  "MAL-2025-9936": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "config",
    "verifiable_function": "\"@zalastax/nolb-_dn\"",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dn contains malicious code. That typically results in arbitrary code execution when the package is installed or required (hence code-execution). Exploitation requires the package to be installed/run on a developer/CI or host (local-only). The vulnerability is located in the named package itself (so classified as a direct-dependency when that package is present). The writeup does not include a specific malicious function or configuration string to confirm exact code paths, but the package name can be detected in consumers' package.json or in node_modules, so verification is partial. No patch or remediation information is provided in the report, so no-fix-available is chosen. Temporal status is not provided; conservatively classified as zero-day given the lack of published remediation details."
  },
  "MAL-2025-9937": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_do- contains malicious code. That indicates arbitrary/malicious code present in the package artifact (code-execution) and that exploitation requires the package to be installed/run locally (local-only). The vulnerability is in the named package itself (classified as direct-dependency for the affected artifact). The advisory gives no function names, indicators, or mention of a published fix or active exploitation, so verifiability is non-verifiable and no patch is documented (treated as no-fix-available). The disclosure appears to be a current discovery of malicious content rather than a longstanding documented issue, so it is classified as zero-day."
  },
  "MAL-2025-9938": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_do4",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package @zalastax/nolb-_do4 contains malicious code. Presence of that package in a project can be confirmed, but the advisory gives no specific code paths or function names, so verification is partial. Malicious npm packages typically execute on install or when required (i.e., they enable arbitrary code execution on the host where the package is installed), which is why the impact is classified as code-execution and the attack vector as local-only (requires installation/use of the package). The vulnerability is assigned to the package itself (direct-dependency). No patch or remediation is mentioned in the writeup, but removal/replacement of the malicious package is an available mitigation without a vendor update, so remediation is classified as workaround-available. The advisory provides no timeline or evidence of in-the-wild exploitation or an upstream patch; it was treated as a newly disclosed malicious package (zero-day) in absence of further temporal details."
  },
  "MAL-2025-9939": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_doh contains malicious code. This indicates the threat resides in the package itself (i.e., the package is malicious), which is most directly represented as a vulnerability in that package (direct-dependency). Malicious package code would execute when the package is installed/required/run in the consumer environment, so the attack requires the package to run locally. The primary impact is arbitrary code execution by the malicious payload. The writeup provides no specific function names, configuration patterns, or remediation/patch details, so many specifics cannot be verified from the provided data; removal or avoidance of the package is a practical mitigation but no patch is mentioned."
  },
  "MAL-2025-9940": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_dop",
    "verifiable_function": "@zalastax/nolb-_dop",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dop contains malicious code. That is an objective indicator that a project including and executing this package could run attacker-controlled code (code-execution). The malicious code resides in the named package itself (not described as a subdependency), so the vulnerability is classified as affecting the package directly. Exploitation requires the package to be present and executed on the host (local-only). Remediation is classified as workaround-available because removing or replacing the malicious package is a practical mitigation when a clean patched release is not specified in the report. Verifiability is set to verifiable because the package name is provided and its presence can be confirmed in dependency manifests or installed node_modules."
  },
  "MAL-2025-9941": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dor contains malicious code but provides no details about specific payloads, entry points, or exploitation vectors. Because the malicious code resides in the package itself, the issue is tied to that package (direct-dependency) and would require the package to be present/executed locally (local-only). Malicious package content implies the potential for arbitrary code execution, so impact is classified as code-execution. The writeup includes no function names or configuration indicators, so the condition cannot be verified by a deterministic code/config pattern from the information given. No remediation or exploitation timeline is provided; removal or avoiding the package is a practical mitigation, so remediation is classified as a workaround; the discovery is treated as a newly reported malicious package (zero-day) due to lack of timeline or established remediation information."
  },
  "MAL-2025-9942": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_dos",
    "verifiable_function": "require('@zalastax/nolb-_dos')",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dos contains malicious code. Presence of the malicious package can be verified by inspecting package files or an import/require. Malicious npm packages execute when installed or required (local execution), yielding arbitrary code execution. The vulnerability is in the package itself (affects projects that include it as a dependency). No details about a patch were provided; remediation is typically removal/replacement of the package (workaround). The disclosure appears to be a direct discovery of malicious code (treated as a recent/active discovery). Classifications are limited to facts in the writeup and avoid assumptions about specific payloads, exploit chains, or patch status."
  },
  "MAL-2025-9943": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_dot",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report specifically identifies a single npm package (@zalastax/nolb-_dot) as containing malicious code, so the issue is tied to that package (direct-dependency). Malicious code in a library typically results in arbitrary code execution when the package is installed or required, so the primary impact is code-execution. Exploitation requires installing or running the package in a local/dev/CI environment rather than being directly network-triggerable, so the attack vector is classified as local-only. The package name is provided but no specific malicious function or configuration indicator is listed, so the condition is only partially verifiable by code inspection of the package contents (package is identifiable but no signature function was specified). No remediation or patch information is provided in the writeup, so a fix cannot be assumed to exist and is classified as no-fix-available. The disclosure appears to be a direct discovery of malicious content (no established exploitation history or long-standing status provided), so it is classified temporally as a zero-day based on the available information."
  },
  "MAL-2025-9944": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_dou contains malicious code but gives no specific functions, configuration patterns, or exploitation details. Because the issue is in the package itself it affects projects that include it (direct-dependency). Malicious package code typically executes in the environment that installs or requires it, so the most objective impact classification is arbitrary code execution; there are no details indicating network or user-input triggers. No specific indicators (function names or config strings) were provided, so the presence cannot be programmatically verified from the writeup. A practical mitigation is to remove/replace the package (workaround) but no patch or fixed version is mentioned. The disclosure timing isn’t specified; this appears to be a newly reported malicious package rather than a long-known legacy issue, so it’s classified as zero-day."
  },
  "MAL-2025-9945": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_dov",
    "verifiable_function": "@zalastax/nolb-_dov",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report identifies a specific npm package (@zalastax/nolb-_dov) as containing malicious code. Presence of that package name in a project (package.json / node_modules) is an objective indicator, so verification can be done by searching for the package name. Because the malicious code is in the package itself, it affects consumers that install/use that package (direct-dependency). Malicious package code typically executes on install or when required/loaded in the local runtime, so the attack vector is classified as local-only. The primary impact of embedded malicious code is arbitrary code execution. The writeup contains no information about a patched version or remediation, so remediation is conservatively classified as no-fix-available. The advisory gives no timeline or exploitation details; the package-level malicious insertion is treated as a recently disclosed (zero-day) event in the absence of further temporal data. If more details (e.g., specific malicious functions, whether it runs at install vs. runtime, or existence of a fixed release) are provided, some classifications should be revised."
  },
  "MAL-2025-9946": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_dsr-rollback-org-n",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the named npm package contains malicious code. This implies arbitrary code execution risk when the package is installed or executed (code-execution). The vulnerability resides in the package itself (the named package), so the most direct context is a direct-dependency. Confirmation requires inspecting the package contents for malicious payloads or scripts; the writeup does not specify a particular function or config indicator, so verification is only partial. Exploitation generally requires the package to be installed/run locally (local-only). No patch or timeline information is provided, so remediation is likely to rely on removing or replacing the package (workaround) rather than a documented safe update, and the disclosure appears to be a newly-identified malicious package (classified here as zero-day)."
  },
  "MAL-2025-9947": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_dsr-rollback-org-o",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report indicates the package @zalastax/nolb-_dsr-rollback-org-o contains malicious code. Presence of malicious code in a named package can be confirmed by inspecting the package contents (partial verification here because no specific malicious function or marker is listed). The malicious behavior would be triggered by installing or importing/running the package locally, so the vector is local-only. Because the package contains malicious code, the primary impact is arbitrary code execution. The package itself is the affected component (direct-dependency). Remediation can typically be achieved by removing or replacing the package (workaround) rather than an assured upstream patch based on the provided information. No temporal detail was provided in the report; this is treated as a newly identified malicious package (zero-day) in the absence of further timeline or exploitation data."
  },
  "MAL-2025-9948": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states a specific npm package contains malicious code but provides no details about the malicious payload, functions, or whether a fixed version exists. Presence of malicious code in an npm package is detectable by inspecting the package, but no specific function or configuration is named in the writeup, so it cannot be verified from the information given. A malicious npm package typically executes when installed or required by a project, which requires the package to be present in the local environment (install/CI/runtime), so the attack vector is local-only. Because malicious package code can execute arbitrary actions on the host, the primary impact is arbitrary code execution. The package itself is the affected component (not described as only a transitive or dev-only dependency), so classification as a direct-dependency vulnerability is appropriate. No remediation details or patch information are provided; removing or replacing the package is the obvious immediate mitigation, so a workaround is available pending an authoritative fix. The report gives no timing or exploitation-status details; this appears to be a newly reported malicious package (no evidence of established exploitation or published fixes), so it is classified as a zero-day in the absence of additional temporal data."
  },
  "MAL-2025-9949": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_dsr-rollback-org-q",
    "verifiable_function": "@zalastax/nolb-_dsr-rollback-org-q",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_dsr-rollback-org-q contains malicious code. Presence of that package in a project's dependencies is an objective indicator (verifiable) and the malicious code would execute in the context of the installing/using environment (local install/require). Because the package itself is the compromised artifact, the issue is a direct-dependency risk. Malicious package code enables arbitrary code execution; immediate remediation is typically to remove or replace the package (workaround) rather than rely on a presumed patch (no patch information provided). No timeline or exploitation-in-the-wild information is included in the report, so this is treated as a newly disclosed malicious package (zero-day) for classification purposes."
  },
  "MAL-2025-9950": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_dsr-rollback-org-r contains malicious code. This indicates malicious code resides in the package itself (affecting projects that include it as a dependency) and would execute in the local environment when the package is installed or required. No behavioural details, specific functions, or exploit delivery mechanisms are provided in the writeup, so execution modality and network behavior cannot be confirmed."
  },
  "MAL-2025-9951": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_dsr-rollback-org-s",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "network-accessible",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package published to npm contains malicious code; exploitation occurs when the package is fetched/installed or executed by a consumer (network-distributed package). The vulnerability is tied to the specific named package, but the write-up provides no specific malicious function or configuration to confirm exact behavior, so full verification of the malicious indicator requires examining the package contents. Removal or replacement of the package is the practical mitigation (no confirmed patched safe version in the report). No information about in-the-wild exploitation or patch availability was provided."
  },
  "MAL-2025-9952": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_du2",
    "verifiable_function": "require('@zalastax/nolb-_du2')",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_du2 contains malicious code. Presence of malicious code in an installed package is a runtime risk (it executes when the package is loaded/run), so the impact is arbitrary code execution. Exploitability depends on the package being present and executed in the runtime (runtime-critical). The package name is provided, so the condition is verifiable by finding the package/import in a project. No specific malicious function or payload, exploitation path, or patch status is described, so remediation and temporal choices reflect that limited information."
  },
  "MAL-2025-9953": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_due",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "configuration-dependent",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package artifact itself contains malicious code (so impact is arbitrary code execution when the package is installed or executed). The vulnerability sits in the named package artifact, so it is a direct-dependency issue for projects that include it. The exact trigger (install-time script vs runtime require) is not specified, so exploitability depends on how the package is used/configured. Presence of malicious code can be detected by inspecting the package contents (some indicators likely present) but no specific function or signature was provided, so verification is incomplete. Remediation is typically removal/replacement or mitigation rather than a simple in-place patch; the disclosure appears recent with no exploitation details provided."
  },
  "MAL-2025-9954": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "\"@zalastax/nolb-_e\"",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report explicitly names a single npm package (@zalastax/nolb-_e) as containing malicious code. Presence of that package in a project's package.json is an objective indicator, so the issue is verifiable by searching for the package name in dependency manifests. Malicious code in a package typically executes on the machine that installs or requires the package (e.g., via install scripts or at runtime), so the attack is local to environments that install/use the package. The primary impact class for a package carrying malicious code is arbitrary code execution. Because the package itself is the affected artifact listed, the most direct exploitability context is when it is a direct dependency of a project. No details about a published patch or active in-the-wild exploitation are provided, so remediation is conservatively classified as a workaround (remove/replace the package) rather than assuming a safe patch exists. Temporal classification is set to zero-day because the write-up discloses malicious content in the package without indicating established exploitation history or a long-documented advisory; however, the writeup provides no temporal/exploitation specifics."
  },
  "MAL-2025-9955": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_e0",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_e0 contains malicious code but provides no code-level indicators or exploit details. Presence of the package in a project's dependency list can be objectively detected (hence partially-verifiable), but the specific malicious function or trigger is not provided. Malicious npm packages typically execute when installed or imported (local install/CI/developer environments), so the most direct attack vector is local execution. The primary impact is arbitrary code execution. A pragmatic remediation is to remove/replace the package or prevent its installation (workaround) since no patch or function-level fix is described. Temporal data (exploit in the wild, patch availability) is not provided; classified as zero-day due to lack of temporal details about established remediation or exploitation."
  },
  "MAL-2025-9956": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_e1",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the specific npm package @zalastax/nolb-_e1 contains malicious code. That makes the condition discoverable by presence of the package in a project (hence partial verifiability) and implies malicious payloads in the package could execute when the package is installed or required (code-execution). Exploitation requires the package to be present/installed (local-only) and the package itself is the affected artifact (direct-dependency when included). No function or configuration indicator is provided in the writeup, so exact code paths cannot be confirmed. No patch information is given; removing or avoiding the package is an available mitigation (workaround). The package appears to be a malicious package registry discovery (treated as a newly-disclosed malicious package), so classified as zero-day given the report provides no history or known exploit timeline."
  },
  "MAL-2025-9957": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_e2",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_e2 contains malicious code. That implies arbitrary/unauthorized code execution when the package is installed or executed (local install/runtime). The package itself is the affected artifact (hence classified as a direct-dependency issue for projects that include it). The writeup names the package but provides no specific malicious function or indicators and gives no remediation or exploitation timeline, so verifiability is partial and remediation/temporal fields are assigned conservatively based on absence of patch/exploit details."
  },
  "MAL-2025-9958": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_e3 contains malicious code. This indicates the package itself is the offender (direct-dependency) and that exploitation requires installing/including the package in a project (local-only). Malicious package code implies arbitrary code execution potential when the package runs, so impact is classified as code-execution. No specific function names, configuration strings, or behavioral details are provided, so the presence of the malicious behavior cannot be confirmed by a specific code/config pattern (non-verifiable). Removal or replacement of the package is a feasible mitigation without relying on a patched release (workaround-available). The writeup gives no timing or exploitation information, so it is treated as a newly reported malicious package (zero-day) for temporal classification."
  },
  "MAL-2025-9959": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_e4 contains malicious code but gives no details about specific functions, trigger conditions, or fixes. Because the package itself is malicious, the primary risk arises when the package is installed/imported (local environment) and would affect projects that include it (direct dependency). Malicious package content implies arbitrary code execution capability. No specific vulnerable function or config is provided, so the condition cannot be verified by a simple code/config pattern. The advisory does not mention a patched release or remediation, so no fix availability is indicated, and no information about active exploitation or long-standing status is provided; this is therefore categorized as a zero-day discovery pending further details."
  },
  "MAL-2025-9960": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_e5 contains malicious code but gives no code-level indicators. Malicious package code runs on systems that install or load it (local supply-chain), so the immediate risk is arbitrary code execution in the runtime that includes the package. The package itself is listed as affected (vulnerability resides in that package), so classify as a direct dependency issue. No specific functions or configuration strings are provided, so the condition cannot be verified from code/config alone. No patch or exploitation timeline is given; removal/replacement of the package is a practical mitigation."
  },
  "MAL-2025-9961": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_e6",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "user-input-required",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_e6 contains malicious code. That indicates arbitrary code shipped inside the package which can execute when the package is installed/required (code-execution). Presence of malicious code is tied to the package itself (the issue is in that package), so it is classified relative to the package (direct-dependency). Exploitation requires a consumer to install or import the malicious package (i.e., a user/developer action), so the attack vector is classified as user-input-required. No specific function or configuration was provided in the writeup, but the package name is known, so verification is partial (package can be inspected but no concrete function signature was given). No patch or fix details were provided; a practical remediation is to remove/replace the package (workaround) rather than a neat version bump indicated in the report. The disclosure appears to be a direct discovery of malicious code in the package (recently flagged), so it is classified as a zero-day in the absence of evidence of remediation or active exploitation."
  },
  "MAL-2025-9962": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_e7",
    "verifiable_function": "unknown",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_e7 contains malicious code. That indicates a malicious payload embedded in the package artifact itself (verifiable by inspecting the package contents) which would execute when the package is installed or required in a project (local execution context). The affected package is named explicitly (the malicious code is in that package), so the vulnerability is in that package itself (direct-dependency). Malicious code presence implies potential arbitrary code execution. The report provides no specific function names, trigger conditions, exploit timeline, or available patches; therefore verifiability is partial (package is identifiable but no code indicators provided), remediation is classified as a workaround available (removal/replacement of the malicious package is an immediate mitigation), and temporal classification is set to zero-day because the writeup only states the package \"was found\" to contain malicious code without details about long-term tracking or known active exploitation."
  },
  "MAL-2025-9963": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_e8",
    "verifiable_function": "unknown",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states that the npm package @zalastax/nolb-_e8 contains malicious code. This is an indicator that arbitrary/malicious code could execute when the package is installed or required, so impact is classified as code-execution. The package-level nature of the issue points to the affected package itself (direct-dependency) rather than a deeper transitive detail. No specific functions, configuration strings, or exploit delivery details are provided, so verifiability is partial: the package name identifies the bad package but no code pattern or function is specified. Attackability is classified as local-only because exploitation requires installing or including the malicious package in a project (no network-exploitation details are provided). No remediation or patch information is given in the writeup, so remediation is classified as no-fix-available (conservative). Temporal classification is set to zero-day because the writeup simply reports discovery of malicious code with no indication of established exploit activity or long-standing documentation."
  },
  "MAL-2025-9964": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_e9 contains malicious code. There are no details about specific functions or configuration indicators, so the presence of malicious behavior cannot be confirmed by a simple code/config pattern check (hence non-verifiable). The issue resides in the package itself (not described as a sub-dependency), so it is classified as a direct-dependency problem. Malicious package code typically executes on the host where the package is installed/required, so the attack requires local installation/execution of the package (local-only). The primary impact from malicious code is arbitrary code execution. No patch or timeline information is provided; practical mitigation is to remove or replace the package (workaround) rather than a documented in-place patch, and the report gives no indication of in-the-wild exploitation, so it is treated as a recently discovered malicious package (zero-day) based on the limited disclosure."
  },
  "MAL-2025-9965": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_ecp",
    "verifiable_function": "@zalastax/nolb-_ecp",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_ecp contains malicious code. This is a vulnerability in the package itself (i.e., the package is the affected component), so it is classified as a direct-dependency issue for any project that depends on it. The presence of malicious code in a package is typically verifiable by inspecting the package contents or package.json/node_modules entries, so verifiability is set to verifiable (the package name can be searched for). Because the writeup gives no details about trigger conditions, network behavior, or payload, the most conservative attack vector is local-only (the malicious code would be present on any system that installs the package). Malicious code generally enables arbitrary actions when executed, so the primary impact is classified as code-execution. As no patch detail is provided, an immediate mitigation is to remove or replace the package (a practical workaround), so remediation complexity is set to workaround-available. The writeup does not include temporal or exploitation details; given the package was found to contain malicious code (an active discovery), temporal classification is set to zero-day to reflect a newly observed malicious package (no information about patches or widespread exploitation was provided). Decisions avoid assuming specific install hooks, network behaviors, or exploit chains because those details are not in the report."
  },
  "MAL-2025-9966": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_ecq contains malicious code. That indicates arbitrary code in the package itself (code-execution) which would execute when the package is installed or required locally, so the vector is local (requires installation/import). The affected component is the named package itself, so the vulnerability resides in that package (direct-dependency). No specific function names, indicators, exploit details, or timeline are provided in the writeup, so precise verification and temporal/exploitation details cannot be determined from the provided data. A practical remediation is to remove or replace the package (workaround) rather than relying on a known patch in the absence of further info."
  },
  "MAL-2025-9967": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report only states that the npm package @zalastax/nolb-_ecr contains malicious code. There are no specifics about function names, configuration strings, remote triggers, or whether it is only a dev/transitive dependency. Malicious package code typically runs when the package is installed or required (local install/CI/developer machines), which implies local-only access and the potential for arbitrary code execution. Because no concrete code paths or function names were provided, the presence cannot be confirmed by a specific code/config pattern here. Removal or replacement of the package is the straightforward mitigation, and the package appears to be a newly reported malicious package (no patch/version remediation details provided), so it is treated as a newly disclosed/zero-day supply-chain compromise."
  },
  "MAL-2025-9968": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_edb",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_edb contains malicious code. That indicates code present in the package can execute on any system where the package is installed (local-only) and represents arbitrary code execution risk. The vulnerability is in the named package itself (direct-dependency). The package name is provided but no specific malicious function or configuration is identified, so verification is only partial. No patch or temporal details are provided; immediate attention is warranted."
  },
  "MAL-2025-9969": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_edc",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "simple-update",
    "temporal_classification": "stable-mature",
    "reasoning": "The report states the package @zalastax/nolb-_edc contains malicious code. Presence of that specific package in a project's package.json/lockfile is an indicator (hence partially-verifiable), and the malicious code most likely results in arbitrary code execution when the package is installed or run locally. The vulnerability is attributed to the named package itself (affected package listed), so classification as a direct dependency is appropriate for projects that include it directly. Remediation is typically removal or updating the dependency to a safe/patched version (simple update). No temporal details or evidence of active exploitation were provided, so a neutral stable classification is used."
  },
  "MAL-2025-9970": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_elh contains malicious code — that implies arbitrary code execution when the package is installed or required (local install/runtime). The vulnerability is in the named package itself (direct dependency). The writeup gives no specific function, code pattern, or remediation details, so presence cannot be verified from the provided text alone and no patch status or exploitation timeline is stated."
  },
  "MAL-2025-9971": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_eli",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_eli contains malicious code but provides no details on trigger or payload. That implies the malicious code is present in the package itself (direct-dependency) and would execute when the package is installed or required locally. Malicious package content typically enables arbitrary code execution. No specific vulnerable function or configuration is listed, so verification is partial. No remediation information is provided; removal/avoidance is a viable mitigation without an explicit patch. Disclosure timing/exploitation status is not given, so treated as recently disclosed."
  },
  "MAL-2025-9972": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_elj",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the specific npm package @zalastax/nolb-_elj contains malicious code. That indicates arbitrary/malicious code runs when the package is installed/imported (code-execution) and requires the package to be present/executed in the local environment. The vulnerability is intrinsic to that package (so it affects projects that import it directly). No specific malicious function, network behavior, or remediation timeline is provided, so verifiability and temporal classification are conservative/partial."
  },
  "MAL-2025-9973": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "runtime-critical",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_elk contains malicious code but gives no code-level indicators or function names, so this cannot be confirmed by a specific code/config pattern (non-verifiable). Malicious npm packages require installation into a project or environment (local install/CI) to take effect, so the attack vector is local-only. Because the package contains malicious code, the primary impact is arbitrary code execution when the package is run or imported; such packages typically affect runtime execution paths (runtime-critical). No specific remediation or patched version is mentioned; removing or replacing the package is a feasible mitigation without relying on an available fixed release, so remediation is classified as workaround-available. The writeup gives no temporal details; because this is a report of a malicious package discovery, it is classified as zero-day (recently discovered) — this temporal assignment is tentative given the lack of explicit dates or exploit-status in the provided details."
  },
  "MAL-2025-9974": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_enk",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_enk contains malicious code. Presence of that package in a project or lockfile is an objective indicator (verifiable). Malicious package code typically runs when installed or when the package is required, enabling arbitrary code execution on the host (hence code-execution). Exploitation requires the package to be present in the consumer environment (local execution/install), and the affected component is the package itself (direct-dependency). No specific vulnerable function or exploit vector is described, so removal/replacement of the package is a practical mitigation rather than a known upstream patch."
  },
  "MAL-2025-9975": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_enl",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_enl contains malicious code but provides no behavioral details. Verifiability: the package name is given so presence of the package in a project can be confirmed, but no specific malicious function or configuration string is listed, so full code-level confirmation of the malicious behavior cannot be made from the writeup alone (partially-verifiable). Exploitability context: the affected item is the listed package itself (direct-dependency). Attack vector: exploitation requires the package to be included/installed in a project (local-only) since no network-exposed or configuration-conditional vector is specified. Impact: malicious code in a package implies arbitrary code can run when the package is executed/installed, so code-execution is the primary impact. Remediation: the advisory gives no indication of a patched release; the immediate practical mitigation is to remove or replace the package (workaround-available) rather than a confirmed simple version bump. Temporal: the writeup gives no timeline or proof of exploitation or long-term status; the finding appears to be a recent discovery of malicious content and no established remediation is described, so this is treated as a zero-day discovery for the purposes of classification."
  },
  "MAL-2025-9976": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_enm",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_enm contains malicious code. That indicates arbitrary code in the package itself (impact: code execution) which would affect consumers that install or import that package (context: vulnerability is in the package itself rather than a sub-dependency). The package must be present/installed or imported locally for the malicious code to run (attack vector: local-only). Information is limited: no specific malicious function or exploitation details, and no remediation or exploitation timeline is provided, so choices are conservative and based only on the facts given."
  },
  "MAL-2025-9977": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_enn",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package @zalastax/nolb-_enn contains malicious code. That is directly verifiable by inspecting the package contents (but no specific malicious function or config string is provided), so classification is partially-verifiable. Because the package itself is malicious, the risk arises when the package is present in a codebase (direct-dependency). Malicious packages typically execute code during install or when required, so the primary attack vector is local (developer/CI/runtime environment where the package is installed). The expected impact is arbitrary code execution given 'malicious code' presence. The advisory provides no information about a patched version or remediation, so remediation is classified as no-fix-available (no patch announced). No timing or exploitation-in-the-wild details are provided; the package being newly identified as malicious implies a recent discovery, so temporal classification is set to zero-day rather than indicating established exploitation or maturity."
  },
  "MAL-2025-9978": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states a package (@zalastax/nolb-_eno) contains malicious code. This is a vulnerability in the listed package itself (direct dependency if installed). Malicious package code typically results in arbitrary code execution when the package is installed/imported, so impact is code-execution. Exploitation requires the package to be present in the project or installed/run locally, so attack vector is local-only. The report gives no specific function, file pattern, or configuration string to confirm the exact malicious indicator, so the presence of malicious behavior cannot be verified from the writeup alone. No remediation or timeline details are provided; removing or not installing the package is an available mitigation, but no patch information is included."
  },
  "MAL-2025-9979": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_evi contains malicious code but gives no indicator functions, configuration strings, or exploitation details. Because the malicious code is in the package itself it is a direct dependency risk. Malicious package code typically executes on the host that installs or runs the package, so the attacker vector is local (installation/runtime on the consumer's machine). The broad term “malicious code” implies arbitrary code execution capability rather than a narrower impact, but the writeup does not provide further specifics. No patch or fixed version is mentioned; the immediate practical mitigation is to remove or avoid the package (workaround). The report appears to be a recent malicious-package finding (MAL-2025-9979), so it is treated as a recent disclosure/zero-day in the absence of further temporal data."
  },
  "MAL-2025-9980": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_evk",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package @zalastax/nolb-_evk contains malicious code but gives no details about specific functions, triggers, or network exposure. Presence of malicious code in a package implies risk of arbitrary code execution when the package is installed or executed (local installation/run). The package name is provided so the condition can be partially verified by locating the package in a project's dependency tree or inspecting its source, but no specific function or code pattern is given. Because no fixed version or patch is mentioned, the practical remediation is removal or replacement of the package (workaround) rather than a documented version bump; the report identifier and phrasing suggest a recent discovery (treated as zero-day for temporal classification)."
  },
  "MAL-2025-9981": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_evl contains malicious code. The write-up gives no specific function names, indicators, or patch status, so the presence cannot be confirmed by a code/config pattern from the provided details (non-verifiable). The malicious code resides in that package itself (i.e., the vulnerable component is the package), so the relevant context is the package as a direct dependency. Exploitation requires the package to be installed and executed on a host (local execution), and the primary impact is arbitrary code execution by the malicious payload. No patch information is provided; a practical immediate mitigation is to remove or replace the package without waiting for an upstream fix, so remediation is classified as workaround-available. Because the report simply states the package was found malicious and gives no indication of age or known in-the-wild exploitation, it is classified as a zero-day disclosure (recently discovered) in the absence of further temporal data."
  },
  "MAL-2025-9982": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_expo-goog",
    "verifiable_function": "name: \"@zalastax/nolb-_expo-goog\"",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report identifies a specific npm package (@zalastax/nolb-_expo-goog) as containing malicious code. Presence of that package in a project's dependency tree can be confirmed by searching for the package name in package.json or lockfiles, so the condition is verifiable. Because the vulnerability is in the named package itself (the affected package is listed directly), it is classified as a direct-dependency issue. Malicious package code typically executes locally when installed or required, so the attack is local-only from the perspective of the consumer environment. The primary impact is arbitrary code execution (malicious code executing on the host). No patch or timeline information is provided in the writeup, and the straightforward mitigation is to remove/replace the package rather than relying on an upstream patch, so remediation is classified as workaround-available. The disclosure appears to be a discrete recent finding (malicious package discovery) with no evidence of long-term tracking or established remediation, so it is treated as a zero-day in the absence of temporal details."
  },
  "MAL-2025-9983": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_expo-googl",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The package itself was found to contain malicious code (so the maliciousness originates in that package). Malicious npm packages commonly execute arbitrary code during install or at runtime, so the primary impact is arbitrary code execution in the environment where the package is installed. The package presence can be detected in package.json / node_modules but no specific malicious function or configuration string is provided, so verification is partial. Removal/blocking of the package is a viable mitigation without a published patch; no details about a patch or active exploitation are given."
  },
  "MAL-2025-9984": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_expo-google contains malicious code. That implies arbitrary code in the package can execute when the package is installed or required (local execution context). The writeup names the compromised package but provides no specific function, indicators, or remediation details, so verification requires behavioral/code inspection and no patch information is given."
  },
  "MAL-2025-9985": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_expo-google- contains malicious code (indicating arbitrary code execution risk). The vulnerability is identified in that specific package (so classification as a direct-dependency is appropriate given only that package is listed). Malicious package code typically executes on the host where the package is installed/required, so the attack vector is local-only based on the supplied information. No specific function, file or configuration detail is provided, so verification cannot be fully confirmed from code patterns alone (hence partially-verifiable). No patch or timeline is mentioned; removal or replacement of the package is the most direct mitigation, so remediation is classified as workaround-available."
  },
  "MAL-2025-9986": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_expon",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_expon contains malicious code. Such malicious package code is typically executed on the host that installs or runs the package (local-only). The vulnerability is in the named package artifact itself (hence classified as affecting the package directly). Malicious code implies potential arbitrary code execution. The report does not specify a particular malicious function or configuration string, so confirmation requires inspecting the package contents; the package name is known but no code indicators were provided, so verifiability is partial. No fix or patch details are given; removing or replacing the package is a viable mitigation without a vendor update (workaround). The disclosure appears to be a recent discovery of malicious code with no exploitation/patch timeline provided, so it is treated as a newly-discovered (zero-day) malicious-package finding."
  },
  "MAL-2025-9987": {
    "verifiability": "verifiable",
    "verifiable_package": "@zalastax/nolb-_expop",
    "verifiable_function": "@zalastax/nolb-_expop",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_expop contains malicious code. Exploitation requires the package to be installed or imported into a project (local installation/execution), so impact is arbitrary code execution in the environment that runs the package. The vulnerability is in the named package itself (direct dependency). It can be verified by locating the package reference and inspecting its published files. Mitigation is typically to stop using/remove the package (workaround) until a trusted replacement or patch is available. The disclosure indicates discovery of malicious content but provides no timeline or evidence of widespread exploitation, so treated as a recent discovery."
  },
  "MAL-2025-9988": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package @zalastax/nolb-_expor contains malicious code. That indicates a compromised package which, when installed/required locally, can execute arbitrary code in the host environment. The writeup gives no specific function names or configuration indicators, so the presence of the malicious behavior cannot be confirmed by searching for a known function or config string in code (non-verifiable). The affected package is listed explicitly (i.e., the compromise is in that package itself), so this applies to projects that directly depend on it. No information about patches or fixed versions is provided, but removal or replacement of the package is an immediate mitigation, so remediation is classed as workaround-available. Because the advisory only reports the presence of malicious code with no timeline or exploitation details, it is treated as a recent disclosure (zero-day) for the purposes of temporal classification."
  },
  "MAL-2025-9989": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_expos",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_expos contains malicious code (no function names or exploit details provided). Presence of the named package in a project can be detected, but no specific function or artifact is given — so verification is partial. Malicious package code would execute locally when installed or required, so the attack vector is local-only and the primary impact is arbitrary code execution. The vulnerability is in the listed package itself (not described as a sub-dependency), so it is classified as a direct-dependency issue for projects that depend on it. No patch information is provided; removing or replacing the package is an immediate mitigation, so a workaround is available. The advisory appears to be a discovery of malicious content (recently disclosed), so it is classified as a zero-day for temporal purposes."
  },
  "MAL-2025-9990": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_exr",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_exr contains malicious code. Presence of a malicious package in a project's dependency tree is verifiable by detecting the package, and such packages typically execute when installed or required locally, allowing arbitrary code execution. No specific malicious function or remediation is provided in the report, so confirmation of the exact payload is incomplete. Removing or avoiding the package is a viable mitigation; no patch information is given, and the package appears newly reported."
  },
  "MAL-2025-9991": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "@zalastax/nolb-_exs",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_exs contains malicious code. This is objectively detectable by the package being present in a project's dependency metadata (package.json) and the malicious payload would execute when the package is installed or required locally. Malicious package content implies potential arbitrary code execution. No information about a patched release or remediation is provided in the writeup, so remediation is classified as unavailable and the issue treated as a recently disclosed malicious package."
  },
  "MAL-2025-9992": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_ext-",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_ext- contains malicious code. That indicates arbitrary code bundled with the package (code-execution) and affects projects that include the package itself (direct-dependency). Exploitation requires the package to be present/installed on the host (local-only). The package name is provided but no specific malicious function, trigger, or configuration is described, so full static verification of the malicious condition is not possible without inspecting the package contents."
  },
  "MAL-2025-9993": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_ext0",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_ext0 contains malicious code. That indicates arbitrary/malicious code present in the package itself (impact: code execution) and that exploitation requires the package to be present and run/installed locally (attack vector: local-only). The vulnerability is in the listed package (not enough information to determine if it is always a transitive vs direct dependency in every project), so it is classified as a direct-dependency issue for projects that include it. Verifiability is marked partially-verifiable because the package name is provided (you can inspect that package) but no specific malicious function or code pattern was supplied. No patch or timeline is given in the writeup, so the temporal state is treated as a recent discovery (zero-day) rather than an established, patched issue. A practical remediation is to remove/replace the package or avoid installing it (workaround available) rather than assuming a safe patched upgrade is available."
  },
  "MAL-2025-9994": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_extc",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The advisory states the package @zalastax/nolb-_extc contains malicious code. That implies arbitrary code execution risk when the package is installed or executed (local-only vector). The package itself is listed as affected, so the issue resides in that package artifact (classified here as direct-dependency based on the package being the compromised component). There is no detail about specific malicious functions or indicators nor about a published fix or exploitation in the wild, so verification is limited to inspecting the package contents (hence partially-verifiable) and remediation likely requires removing/replacing the package (workaround) until a trusted/patched release is available. Temporal classification is set to zero-day because the write-up gives no history or evidence of a mature/older advisory or active exploitation—only that malicious code was found."
  },
  "MAL-2025-9995": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_exte",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_exte contains malicious code. This is a direct package-level issue (direct-dependency). Confirmation can be done by inspecting the package contents, but no specific malicious function or indicator was provided, so verifiability is partial. Malicious package code typically executes locally when installed or required in a project, enabling arbitrary actions (classified as code-execution). Remediation is generally achievable by removing or replacing the package (workaround) rather than a simple benign version bump; no patch status was provided. The disclosure appears to be a recent detection with no timeline or exploitation details, so it is classified as a zero-day disclosure for now."
  },
  "MAL-2025-9996": {
    "verifiability": "verifiable",
    "verifiable_package": "config",
    "verifiable_function": "@zalastax/nolb-_extf",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "no-fix-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_extf contains malicious code. Presence of malicious code in a distributed package typically results in arbitrary code execution when the package is installed or required locally. The package name is given (can be detected in package.json or lockfiles), so verification is possible by scanning dependency manifests. No information was provided about a patch, exploit in the wild, or whether the package is only transitive, so the classification avoids assumptions: treated as a vulnerability in the package itself (direct-dependency), local install/require access, with potential code execution impact, and no explicit patch information."
  },
  "MAL-2025-9997": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_extra",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the package @zalastax/nolb-_extra contains malicious code. The package name is supplied, so presence can be partly confirmed by locating that package in a project's dependency tree or repository (hence partially-verifiable). No specific malicious function or configuration string is named, so full code-pattern verification is not possible. Because the malicious code resides in the package itself it is classified as a vulnerability in the package (direct-dependency). Malicious npm packages typically execute when installed or when their code runs in the host environment, so the most direct attack vector is local execution (install/runtime on a host). The primary impact is arbitrary code execution since malicious code can execute arbitrary actions in the environment. No remediation or patch information is provided; a practical mitigation is removal/replacement of the package (workaround), rather than a known safe version to update to. The disclosure appears to be a specific malicious-package finding with no indication of established historical context or widespread patching, so it is treated as a newly reported (zero-day) malicious package."
  },
  "MAL-2025-9998": {
    "verifiability": "non-verifiable",
    "verifiable_package": "none",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The writeup states the package @zalastax/nolb-_extraw contains malicious code. That indicates arbitrary code bundled in the package which can execute when the package is installed or required locally (local-only) and represents an arbitrary code execution risk. The vulnerability is present in the named package itself (so it's classified as affecting that direct package). The writeup provides no function names, configuration strings, or details about exploit triggers, patch availability, or in-the-wild exploitation, so many specifics cannot be determined from the provided data. A practical mitigation is to remove/replace the package (workaround) rather than assume a safe updated release exists; no specific patch information was provided. The disclosure appears to be a discrete malicious-package finding (catalogued as MAL-2025-9998) with no timeline or exploitation data supplied, so it is conservatively considered newly disclosed (zero-day) for classification purposes."
  },
  "MAL-2025-9999": {
    "verifiability": "partially-verifiable",
    "verifiable_package": "@zalastax/nolb-_extre",
    "verifiable_function": "none",
    "exploitability_context": "direct-dependency",
    "attack_vector": "local-only",
    "impact_scope": "code-execution",
    "remediation_complexity": "workaround-available",
    "temporal_classification": "zero-day",
    "reasoning": "The report states the npm package @zalastax/nolb-_extre contains malicious code. That indicates the package itself is the problematic component (hence classified as a direct-dependency issue) and that compromise would occur when the package is installed or imported on a system (local-only attack vector). Malicious package content implies potential arbitrary code execution when the package runs, so impact is classified as code-execution. The package name is provided but no specific malicious function or exact malicious behavior is described, so verifiability is marked partially-verifiable (package presence is an indicator but the exact code signature or function is not specified). Removal or replacement of the package (workaround) is a practical remediation without necessarily requiring an upstream patch, so remediation complexity is marked workaround-available. The writeup provides no evidence of widespread exploitation or patch state; discovery of malicious code in an npm package is treated here as a newly reported compromise, so the temporal classification is set to zero-day. These classifications are based only on the factual content provided and avoid assuming specific payloads, install-scripts, or exploitation activity beyond the stated presence of malicious code."
  }
}
